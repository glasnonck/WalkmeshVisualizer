<UserControl
    x:Class="WalkmeshVisualizerWpf.Views.ZoomView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
    xmlns:helper="clr-namespace:WalkmeshVisualizerWpf.Helpers"
    xmlns:local="clr-namespace:WalkmeshVisualizerWpf.Views"
    xmlns:ZoomAndPan="clr-namespace:ZoomAndPan;assembly=ZoomAndPan"
    mc:Ignorable="d" 
    d:DesignHeight="450"
    d:DesignWidth="450"
    d:DataContext="{d:DesignInstance local:ZoomView}"
    >
    <UserControl.Resources>
        <!-- Converters -->
        <helper:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
        
        <!-- Commands -->
        <RoutedUICommand x:Key="Commands.ZoomOut">
            <RoutedUICommand.InputGestures>
                <KeyGesture>Minus</KeyGesture>
            </RoutedUICommand.InputGestures>
        </RoutedUICommand>

        <RoutedUICommand x:Key="Commands.ZoomIn">
            <RoutedUICommand.InputGestures>
                <KeyGesture>Plus</KeyGesture>
            </RoutedUICommand.InputGestures>
        </RoutedUICommand>

        <RoutedUICommand x:Key="Commands.JumpBackToPrevZoom">
            <RoutedUICommand.InputGestures>
                <KeyGesture>Backspace</KeyGesture>
            </RoutedUICommand.InputGestures>
        </RoutedUICommand>

        <RoutedUICommand x:Key="Commands.Fill">
            <RoutedUICommand.InputGestures>
                <KeyGesture>Ctrl+F</KeyGesture>
            </RoutedUICommand.InputGestures>
        </RoutedUICommand>

        <RoutedUICommand x:Key="Commands.OneHundredPercent">
            <RoutedUICommand.InputGestures>
                <KeyGesture>Ctrl+0</KeyGesture>
            </RoutedUICommand.InputGestures>
        </RoutedUICommand>

        <RoutedUICommand x:Key="Commands.FifteenHundredPercent" />
    </UserControl.Resources>

    <UserControl.CommandBindings>
        <!-- Bind commands to event handlers. -->
        <CommandBinding 
            Command="{StaticResource Commands.ZoomOut}" 
            Executed="ZoomOut_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.ZoomIn}" 
            Executed="ZoomIn_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.JumpBackToPrevZoom}" 
            Executed="JumpBackToPrevZoom_Executed" 
            CanExecute="JumpBackToPrevZoom_CanExecuted"
            />
        <CommandBinding 
            Command="{StaticResource Commands.Fill}" 
            Executed="Fill_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.OneHundredPercent}" 
            Executed="OneHundredPercent_Executed" 
            />
        <CommandBinding
            Command="{StaticResource Commands.FifteenHundredPercent}"
            Executed="FifteenHundredPercent_Executed"
            />
    </UserControl.CommandBindings>
    
    <!--
    Wrap the ZoomAndPanControl in a ScrollViewer.
    When the scaled content that is displayed in ZoomAndPanControl is larger than the viewport
    onto the content.
    ScrollViewer's scrollbars can be used to manipulate the offset of the viewport.    
    -->
    <ScrollViewer
        x:Name="scroller"
        Grid.Column="0"
        Grid.Row="1"
        CanContentScroll="True"
        VerticalScrollBarVisibility="Visible"
        HorizontalScrollBarVisibility="Visible"
        >

        <!-- This is the control that handles zooming and panning. -->
        <ZoomAndPan:ZoomAndPanControl
            x:Name="ZoomAndPanControl"
            Background="LightGray"
            MouseDown="ZoomAndPanControl_MouseDown"
            MouseUp="ZoomAndPanControl_MouseUp"
            MouseMove="ZoomAndPanControl_MouseMove"
            MouseWheel="ZoomAndPanControl_MouseWheel"
            MouseDoubleClick="ZoomAndPanControl_MouseDoubleClick"
            ContentScale="{Binding ZoomLevel, Mode=TwoWay}"
            MinContentScale="{Binding MinZoomLevel}"
            MaxContentScale="{Binding MaxZoomLevel}"
            >

            <!-- This is the content that is displayed. -->
            <Grid x:Name="theGrid" Width="250" Height="200">
                <!-- This Canvas is the main part of the content that is displayed. -->
                <Canvas x:Name="content" Background="White">
                    <Canvas.Resources>
                        <TransformGroup x:Key="CartesianTransform">
                            <TranslateTransform Y="{Binding BottomOffset}" X="{Binding LeftOffset}"/>
                            <ScaleTransform ScaleY="-1" />
                            <TranslateTransform Y="{Binding Path=Height, RelativeSource={RelativeSource AncestorType={x:Type Grid}}}" />
                        </TransformGroup>

                        <!--<TransformGroup x:Key="OffsetTransform">
                            <TranslateTransform X="{Binding LeftOffset}" Y="{Binding BottomOffset}" />
                            <TranslateTransform Y="{Binding ElementName=theGrid, Path=Height}" />
                        </TransformGroup>-->

                        <TranslateTransform x:Key="CoordOffsetTransform" X="2" Y="1.5" />

                        <Style TargetType="Ellipse" x:Key="CoordPoint">
                            <Setter Property="Width" Value="1" />
                            <Setter Property="Height" Value="1" />
                            <Setter Property="StrokeThickness" Value=".1" />
                        </Style>

                        <Style TargetType="Polygon">
                            <Setter Property="RenderTransform" Value="{StaticResource CartesianTransform}" />
                        </Style>

                        <Style TargetType="StackPanel">
                            <Setter Property="Margin" Value="0" />
                            <Setter Property="Orientation" Value="Horizontal" />
                            <Setter Property="RenderTransform" Value="{StaticResource CoordOffsetTransform}" />
                        </Style>

                        <Style TargetType="TextBlock">
                            <Setter Property="FontSize" Value="4" />
                        </Style>
                    </Canvas.Resources>

                    <!--
                    This Ellipse and StackPanel act as the point and text field for users to check map coordinates.
                    To maintain these data bindings, they will be saved in case the canvas is cleared.
                    If a module is added or removed, both will be hidden using the PointClicked boolean.
                    -->
                    <Ellipse
                        x:Name="leftClickEllipse" Fill="Black" Stroke="White"
                        Visibility="{Binding LeftClickPointVisible, Converter={StaticResource BoolToVisibilityConverter}}"
                        Canvas.Left="{Binding LeftClickPoint.X}"
                        Canvas.Bottom="{Binding LeftClickPoint.Y}"
                        Style="{StaticResource CoordPoint}"
                        />
                    <StackPanel
                        x:Name="leftClickCoords"
                        Visibility="{Binding LeftClickPointVisible, Converter={StaticResource BoolToVisibilityConverter}}"
                        Canvas.Left="{Binding LeftClickPoint.X}"
                        Canvas.Bottom="{Binding LeftClickPoint.Y}"
                        >
                        <TextBlock Text="(" />
                        <TextBlock Text="{Binding LeftClickModuleCoords.X, StringFormat=N2}" />
                        <TextBlock Text=", " />
                        <TextBlock Text="{Binding LeftClickModuleCoords.Y, StringFormat=N2}" />
                        <TextBlock Text=")" />
                    </StackPanel>

                    <Ellipse
                        x:Name="rightClickEllipse" Fill="White" Stroke="Black"
                        Visibility="{Binding RightClickPointVisible, Converter={StaticResource BoolToVisibilityConverter}}"
                        Canvas.Left="{Binding RightClickPoint.X}"
                        Canvas.Bottom="{Binding RightClickPoint.Y}"
                        Style="{StaticResource CoordPoint}"
                        />
                    <StackPanel
                        x:Name="rightClickCoords"
                        Visibility="{Binding RightClickPointVisible, Converter={StaticResource BoolToVisibilityConverter}}"
                        Canvas.Left="{Binding RightClickPoint.X}"
                        Canvas.Bottom="{Binding RightClickPoint.Y}"
                        >
                        <TextBlock Text="(" />
                        <TextBlock Text="{Binding RightClickModuleCoords.X, StringFormat=N2}" />
                        <TextBlock Text=", " />
                        <TextBlock Text="{Binding RightClickModuleCoords.Y, StringFormat=N2}" />
                        <TextBlock Text=")" />
                    </StackPanel>
                </Canvas>

                <!--
                This Canvas and Border are used as a very simple way to render a drag rectangle that
                the user uses to specify an area to zoom in on.
                -->
                <Canvas
                    x:Name="dragZoomCanvas"
                    Visibility="Collapsed"
                    >
                    <Border
                        x:Name="dragZoomBorder"
                        BorderBrush="Black"
                        BorderThickness="1"
                        Background="Silver"
                        CornerRadius="1"
                        Opacity="0"
                        />
                </Canvas>
            </Grid>
        </ZoomAndPan:ZoomAndPanControl>
    </ScrollViewer>
</UserControl>
