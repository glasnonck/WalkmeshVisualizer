<Window
    x:Class="WalkmeshVisualizerWpf.Views.VisualizerWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:views="clr-namespace:WalkmeshVisualizerWpf.Views"
    xmlns:help="clr-namespace:WalkmeshVisualizerWpf.Helpers"
    xmlns:uc="clr-namespace:WalkmeshVisualizerWpf.UserControls"
    xmlns:ZoomAndPan="clr-namespace:ZoomAndPan;assembly=ZoomAndPan"
    xmlns:xctk="http//schemas.xceed.com/wpf/xaml/toolkit"
    mc:Ignorable="d"
    Title="{Binding WindowTitle, Mode=OneTime}"
    MinHeight="600" Height="800"
    MinWidth="800" Width="1200"
    Loaded="MainWindow_Loaded"
    Closing="MainWindow_Closing"
    Closed="MainWindow_Closed"
    Icon="../Resources/Icons/Icon.png"
    d:DataContext="{d:DesignInstance views:VisualizerWindow, IsDesignTimeCreatable=False}"
    ResizeMode="CanResizeWithGrip"
    x:Name="thisWindow"
    >
    <Window.Resources>
        <!-- UI commands. -->
        <RoutedUICommand x:Key="Commands.ZoomOut">
            <RoutedUICommand.InputGestures>
                <KeyGesture>Ctrl+Minus</KeyGesture>
            </RoutedUICommand.InputGestures>
        </RoutedUICommand>
        <RoutedUICommand x:Key="Commands.ZoomIn">
            <RoutedUICommand.InputGestures>
                <KeyGesture>Ctrl+Plus</KeyGesture>
            </RoutedUICommand.InputGestures>
        </RoutedUICommand>
        <RoutedUICommand x:Key="Commands.JumpBackToPrevZoom">
            <RoutedUICommand.InputGestures>
                <KeyGesture>Ctrl+Backspace</KeyGesture>
            </RoutedUICommand.InputGestures>
        </RoutedUICommand>
        <RoutedUICommand x:Key="Commands.Fill">
            <RoutedUICommand.InputGestures>
                <KeyGesture>Ctrl+F</KeyGesture>
            </RoutedUICommand.InputGestures>
        </RoutedUICommand>
        <RoutedUICommand x:Key="Commands.OneHundredPercent">
            <RoutedUICommand.InputGestures>
                <KeyGesture>Ctrl+0</KeyGesture>
            </RoutedUICommand.InputGestures>
        </RoutedUICommand>
        <RoutedUICommand x:Key="Commands.FifteenHundredPercent" />
        
        <!---->
        <RoutedUICommand x:Key="Commands.FindMatchingCoords">
            <!--<RoutedUICommand.InputGestures>
                <KeyGesture>Space</KeyGesture>
            </RoutedUICommand.InputGestures>-->
        </RoutedUICommand>

        <RoutedUICommand x:Key="Commands.LoadK1" />
        <RoutedUICommand x:Key="Commands.LoadK2" />
        <RoutedUICommand x:Key="Commands.LoadCustom" />
        <RoutedUICommand x:Key="Commands.RemoveAll" />
        <RoutedUICommand x:Key="Commands.SwapGame" />
        <RoutedUICommand x:Key="Commands.ClearCache" />

        <!--
        Menu related commands and keybinds.
        -->
        <RoutedUICommand x:Key="Commands.Exit">
            <RoutedUICommand.InputGestures>
                <KeyGesture>Alt+F4</KeyGesture>
            </RoutedUICommand.InputGestures>
        </RoutedUICommand>

        <RoutedUICommand x:Key="Commands.SaveShownCanvas">
            <RoutedUICommand.InputGestures>
                <KeyGesture>Ctrl+S</KeyGesture>
            </RoutedUICommand.InputGestures>
        </RoutedUICommand>

        <RoutedUICommand x:Key="Commands.SaveEntireCanvas">
            <RoutedUICommand.InputGestures>
                <KeyGesture>Ctrl+Shift+S</KeyGesture>
            </RoutedUICommand.InputGestures>
        </RoutedUICommand>

        <RoutedUICommand x:Key="Commands.ViewHelp">
            <RoutedUICommand.InputGestures>
                <KeyGesture>Ctrl+F1</KeyGesture>
            </RoutedUICommand.InputGestures>
        </RoutedUICommand>

        <RoutedUICommand x:Key="Commands.SetColorPreferences" />

        <!--
        ToolBar related commands and keybinds.
        -->
        <RoutedUICommand x:Key="Commands.ShowWalkable">
            <RoutedUICommand.InputGestures>
                <KeyGesture>Ctrl+W</KeyGesture>
            </RoutedUICommand.InputGestures>
        </RoutedUICommand>

        <RoutedUICommand x:Key="Commands.ShowNonWalkable">
            <RoutedUICommand.InputGestures>
                <KeyGesture>Ctrl+Shift+W</KeyGesture>
            </RoutedUICommand.InputGestures>
        </RoutedUICommand>

        <RoutedUICommand x:Key="Commands.ShowDefaultSpawnPoints">
            <RoutedUICommand.InputGestures>
                <KeyGesture>Ctrl+D</KeyGesture>
            </RoutedUICommand.InputGestures>
        </RoutedUICommand>

        <RoutedUICommand x:Key="Commands.ShowTransAbort">
            <RoutedUICommand.InputGestures>
                <KeyGesture>Ctrl+G</KeyGesture>
            </RoutedUICommand.InputGestures>
        </RoutedUICommand>

        <RoutedUICommand x:Key="Commands.ShowTransAbortRegion">
            <RoutedUICommand.InputGestures>
                <KeyGesture>Ctrl+Shift+G</KeyGesture>
            </RoutedUICommand.InputGestures>
        </RoutedUICommand>

        <RoutedUICommand x:Key="Commands.ShowDlzLines">
            <RoutedUICommand.InputGestures>
                <KeyGesture>Ctrl+Z</KeyGesture>
            </RoutedUICommand.InputGestures>
        </RoutedUICommand>

        <RoutedUICommand x:Key="Commands.ShowRimDataDlzLines">
            <RoutedUICommand.InputGestures>
            </RoutedUICommand.InputGestures>
        </RoutedUICommand>

        <RoutedUICommand x:Key="Commands.ShowLivePosition" />
        <RoutedUICommand x:Key="Commands.ShowAllOfRimData" />
        <RoutedUICommand x:Key="Commands.HideAllOfRimData" />

        <RoutedUICommand x:Key="Commands.RunMouseHoverWorker" />
        
        <!--
        Brushes.
        -->
        <SolidColorBrush x:Key="brushRed" Color="Red" />

        <!--
        Converters.
        -->
        <help:ScaleToPercentConverter x:Key="scaleToPercentConverter" />
        <help:ScaleTextToPercentConverter x:Key="scaleTextToPercentConverter" />
        <help:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />
        <help:VisibilityToBoolConverter x:Key="VisibilityToBoolConverter" />
        <help:InverseBoolToVisibilityConverter x:Key="InverseBoolToVisibilityConverter" />
        <help:InverseBooleanConverter x:Key="InverseBooleanConverter" />
        <help:AnyVisibleRdiConverter x:Key="AnyVisibleRdiConverter" />
        <help:AnyHiddenRdiConverter x:Key="AnyHiddenRdiConverter" />
        <help:StringEqualsConverter x:Key="StringEqualsConverter" />
        <help:StringNotEqualsConverter x:Key="StringNotEqualsConverter" />
        <help:IntLessEqualConverter x:Key="IntLessEqualConverter" />
        <help:IntGreaterEqualConverter x:Key="IntGreaterEqualConverter" />
        <help:UintGreaterEqualConverter x:Key="UintGreaterEqualConverter" />
        <help:BoolMultiConverter x:Key="BoolMultiConverter" />
        <help:BoolToVisibilityMultiConverter x:Key="BoolToVisibilityMultiConverter" />
        <help:AndBoolToVisibilityMultiConverter x:Key="AndBoolToVisibilityMultiConverter" />
        <help:OrInverseBoolToVisibilityMultiConverter x:Key="OrInverseBoolToVisibilityMultiConverter" />
        <help:MatchRectFillMultiConverter x:Key="MatchRectFillMultiConverter" />
        <help:PointToTextConverter x:Key="PointToTextConverter" />
        <help:IsNonZeroToVisibilityConverter x:Key="IsNonZeroToVisibilityConverter" />
        <help:IsZeroToVisibilityConverter x:Key="IsZeroToVisibilityConverter" />
        <help:BlackIfTransparentConverter x:Key="BlackIfTransparentConverter" />

        <Style TargetType="ListViewItem" x:Key="BaseItemStyle">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="FontSize" Value="12" />
            <Setter Property="Foreground" Value="Black" />
        </Style>
    </Window.Resources>

    <Window.CommandBindings>

        <!--
        Bind commands to event handlers.
        -->
        <CommandBinding 
            Command="{StaticResource Commands.ZoomOut}" 
            Executed="ZoomOut_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.ZoomIn}" 
            Executed="ZoomIn_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.JumpBackToPrevZoom}" 
            Executed="JumpBackToPrevZoom_Executed" 
            CanExecute="JumpBackToPrevZoom_CanExecuted"
            />
        <CommandBinding 
            Command="{StaticResource Commands.Fill}" 
            Executed="Fill_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.OneHundredPercent}" 
            Executed="OneHundredPercent_Executed" 
            />
        <CommandBinding
            Command="{StaticResource Commands.LoadK1}"
            Executed="LoadK1_Executed"
            />
        <CommandBinding
            Command="{StaticResource Commands.LoadK2}"
            Executed="LoadK2_Executed"
            />
        <CommandBinding
            Command="{StaticResource Commands.LoadCustom}"
            Executed="LoadCustom_Executed"
            />
        <CommandBinding
            Command="{StaticResource Commands.RemoveAll}"
            Executed="RemoveAll_Executed"
            />
        <CommandBinding
            Command="{StaticResource Commands.SwapGame}"
            Executed="SwapGame_Executed"
            />
        <CommandBinding
            Command="{StaticResource Commands.FindMatchingCoords}"
            Executed="FindMatchingCoords_Executed"
            />
        <CommandBinding
            Command="{StaticResource Commands.FifteenHundredPercent}"
            Executed="FifteenHundredPercent_Executed"
            />

        <!--
        Menu related command bindings.
        -->
        <CommandBinding
            Command="{StaticResource Commands.Exit}"
            Executed="ExitCommand_Executed"
            CanExecute="ExitCommand_CanExecute"
            />
        <CommandBinding
            Command="{StaticResource Commands.SaveShownCanvas}"
            Executed="SaveShownCanvas_Executed"
            CanExecute="SaveShownCanvas_CanExecute"
            />
        <CommandBinding
            Command="{StaticResource Commands.SaveEntireCanvas}"
            Executed="SaveEntireCanvas_Executed"
            CanExecute="SaveEntireCanvas_CanExecute"
            />
        <CommandBinding
            Command="{StaticResource Commands.ViewHelp}"
            Executed="ViewHelpCommand_Executed"
            CanExecute="ViewHelpCommand_CanExecute"
            />
        <CommandBinding
            Command="{StaticResource Commands.SetColorPreferences}"
            Executed="SetColorPreferences_Executed"
            CanExecute="SetColorPreferences_CanExecute"
            />

        <!--
        ToolBar related command bindings.
        -->
        <CommandBinding
            Command="{StaticResource Commands.ShowWalkable}"
            Executed="ShowWalkableCommand_Executed"
            />
        <CommandBinding
            Command="{StaticResource Commands.ShowNonWalkable}"
            Executed="ShowNonWalkableCommand_Executed"
            />
        <CommandBinding
            Command="{StaticResource Commands.ShowDefaultSpawnPoints}"
            Executed="ShowDefaultSpawnPoints_Executed"
            />
        <CommandBinding
            Command="{StaticResource Commands.ShowTransAbort}"
            Executed="ShowTransAbortCommand_Executed"
            />
        <CommandBinding
            Command="{StaticResource Commands.ShowTransAbortRegion}"
            Executed="ShowTransAbortRegionCommand_Executed"
            />
        <CommandBinding
            Command="{StaticResource Commands.ShowDlzLines}"
            Executed="ShowDlzLines_Executed"
            />
        <CommandBinding
            Command="{StaticResource Commands.ShowLivePosition}"
            Executed="ShowLivePosition_Executed"
            />
        <CommandBinding
            Command="{StaticResource Commands.ShowRimDataDlzLines}"
            Executed="ShowRimDataDlzLines_Executed"
            />
        <CommandBinding
            Command="{StaticResource Commands.ShowAllOfRimData}"
            Executed="ShowAllOfRimData_Executed"
            />
        <CommandBinding
            Command="{StaticResource Commands.HideAllOfRimData}"
            Executed="HideAllOfRimData_Executed"
            />
        <CommandBinding
            Command="{StaticResource Commands.RunMouseHoverWorker}"
            Executed="RunMouseHoverWorker_Executed"
            />
    </Window.CommandBindings>

    <DockPanel>
        <Grid DockPanel.Dock="Top" Background="#F0F0F0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />   <!-- Menu Items -->
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />   <!-- Progress Bar -->
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="280" />    <!-- Selected Game -->
            </Grid.ColumnDefinitions>
            
            <!--
            Menu to house various commands.
            -->
            <Menu x:Name="Menu" Grid.Column="0">
                <Menu.Resources>
                    <Style TargetType="MenuItem">
                        <Setter Property="FontFamily" Value="Microsoft Sans Serif" />
                        <Setter Property="FontSize" Value="14" />
                        <Setter Property="Padding" Value="6,2" />
                    </Style>
                </Menu.Resources>

                <!--
                File Menu
                -->
                <MenuItem Header="_File">
                    <MenuItem Header="Save _Shown Canvas As Image..." Command="{StaticResource Commands.SaveShownCanvas}" />
                    <MenuItem Header="Save _Full Canvas As Image..." Command="{StaticResource Commands.SaveEntireCanvas}" />
                    <Separator />
                    <MenuItem Header="_Exit" Command="{StaticResource Commands.Exit}" />
                </MenuItem>

                <!--
                View Menu
                -->
                <MenuItem Header="_View">
                    <MenuItem Header="Zoom _In" Command="{StaticResource Commands.ZoomIn}" />
                    <MenuItem Header="Zoom _Out" Command="{StaticResource Commands.ZoomOut}" />
                    <Separator />
                    <MenuItem Header="_Fill Page Zoom" Command="{StaticResource Commands.Fill}" />
                    <MenuItem Header="_Default Zoom" Command="{StaticResource Commands.OneHundredPercent}" />
                    <MenuItem Header="Return to _Previous Zoom" Command="{StaticResource Commands.JumpBackToPrevZoom}" />
                    <Separator />
                    <MenuItem Header="Set color preferences" Command="{StaticResource Commands.SetColorPreferences}"/>
                </MenuItem>

                <!--
                Layers Menu
                -->
                <MenuItem Header="_Layers">
                    <MenuItem
                        Header="Show _Walkable Faces"
                        Command="{StaticResource Commands.ShowWalkable}"
                        IsCheckable="True"
                        IsChecked="{Binding ShowWalkableFaces, Mode=TwoWay}"
                        IsEnabled="{Binding IsBusy, Converter={StaticResource InverseBooleanConverter}}"
                        >
                        <MenuItem.Icon>
                            <Image Source="../Resources/Icons/WalkIcon.png" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem
                        Header="Show _Non-Walkable Faces"
                        Command="{StaticResource Commands.ShowNonWalkable}"
                        IsCheckable="True"
                        IsChecked="{Binding ShowNonWalkableFaces, Mode=TwoWay}"
                        IsEnabled="{Binding IsBusy, Converter={StaticResource InverseBooleanConverter}}"
                        >
                        <MenuItem.Icon>
                            <Image Source="../Resources/Icons/NonWalkIcon.png" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <Separator />
                    <MenuItem
                        Header="Show Default _Spawn Points"
                        Command="{StaticResource Commands.ShowDefaultSpawnPoints}"
                        IsCheckable="True"
                        IsChecked="{Binding ShowDefaultSpawnPoints, Mode=TwoWay}"
                        IsEnabled="{Binding IsBusy, Converter={StaticResource InverseBooleanConverter}}"
                        >
                        <MenuItem.Icon>
                            <Image Source="../Resources/Icons/DefaultSpawnPointIcon.png" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem
                        Header="Show _Gather Party Points"
                        Command="{StaticResource Commands.ShowTransAbort}"
                        IsCheckable="True"
                        IsChecked="{Binding ShowTransAbortPoints, Mode=TwoWay}"
                        IsEnabled="{Binding IsBusy, Converter={StaticResource InverseBooleanConverter}}"
                        >
                        <MenuItem.Icon>
                            <Image Source="../Resources/Icons/GatherPartyIcon.png" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem
                        Header="Show Gather Party _Regions"
                        Command="{StaticResource Commands.ShowTransAbortRegion}"
                        IsCheckable="True"
                        IsChecked="{Binding ShowTransAbortRegions, Mode=TwoWay}"
                        >
                        <MenuItem.IsEnabled>
                            <MultiBinding Converter="{StaticResource BoolMultiConverter}" ConverterParameter="And">
                                <Binding Path="IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                <Binding Path="OnRims.Count" Converter="{StaticResource IntLessEqualConverter}" ConverterParameter="1" />
                            </MultiBinding>
                        </MenuItem.IsEnabled>
                        <MenuItem.Icon>
                            <Image Source="../Resources/Icons/GatherPartyRegionIcon.png" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <Separator />
                    <MenuItem
                        Header="_Identify RIM data under mouse."
                        Command="{StaticResource Commands.RunMouseHoverWorker}"
                        IsCheckable="True"
                        IsChecked="{Binding ShowDlzLines, Mode=OneWay}"
                        >
                        <MenuItem.Icon>
                            <Image Source="../Resources/Icons/MouseHoverIcon.png" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem
                        Header="Show Displaced Loading _Zone (DLZ) Lines"
                        Command="{StaticResource Commands.ShowDlzLines}"
                        IsCheckable="True"
                        IsChecked="{Binding ShowDlzLines, Mode=TwoWay}"
                        IsEnabled="{Binding IsBusy, Converter={StaticResource InverseBooleanConverter}}"
                        >
                        <MenuItem.Icon>
                            <Image Source="../Resources/Icons/DlzIcon.png" />
                        </MenuItem.Icon>
                    </MenuItem>
                </MenuItem>

                <!--
                Live Menu
                -->
                <MenuItem Header="Li_ve">
                    <MenuItem Header="Show Live _Position" IsCheckable="True"
                              IsChecked="{Binding ShowLivePosition, Mode=TwoWay}"
                              Command="{StaticResource Commands.ShowLivePosition}">
                        <MenuItem.Icon>
                            <Image Source="../Resources/Icons/LivePositionIcon.png" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="Follow Live Position" IsCheckable="True"
                              IsChecked="{Binding ViewFollowsLivePosition, Mode=TwoWay}">
                        <MenuItem.Icon>
                            <Image Source="../Resources/Icons/ViewFollowsLivePositionIcon.png" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="Show Live Position _Coordinates" IsCheckable="True"
                              IsChecked="{Binding ShowLivePositionCoordinates, Mode=TwoWay}">
                        <MenuItem.Icon>
                            <TextBlock VerticalAlignment="Center" Text="x,y" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="_Show Current Live Module" IsCheckable="True"
                              IsChecked="{Binding ShowCurrentLiveModule, Mode=TwoWay}">
                        <MenuItem.Icon>
                            <Image Source="../Resources/Icons/ShowCurrentModuleIcon.png" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="_Hide Previous Live Module" IsCheckable="True"
                              IsChecked="{Binding HidePreviousLiveModule, Mode=TwoWay}">
                        <MenuItem.Icon>
                            <Image Source="../Resources/Icons/HidePreviousModuleIcon.png" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="Hotswap to _Live Game Data" IsCheckable="True"
                              IsChecked="{Binding HotswapToLiveGame, Mode=TwoWay}">
                        <MenuItem.Icon>
                            <Image Source="../Resources/Icons/HotswapIcon.png" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <!--<Separator />
                    <MenuItem Header="Live Position Fill Color" />
                    <MenuItem Header="Live Position Stroke Color" />-->
                    <!--<Separator />
                    <MenuItem Header="Update at 60 FPS" />
                    <MenuItem Header="Update at 40 FPS" />
                    <MenuItem Header="Update at 20 FPS" />
                    <MenuItem Header="Update at 10 FPS" />-->
                </MenuItem>

                <!--
                Help Menu
                -->
                <MenuItem Header="_Help">
                    <MenuItem Header="_View Help" Command="{StaticResource Commands.ViewHelp}" />
                </MenuItem>
            </Menu>

            <ProgressBar x:Name="pbLoading" Width="280" Grid.Column="2"
                Visibility="{Binding IsBusy, Converter={StaticResource BoolToVisibilityConverter}}"
                Value="{Binding CurrentProgress}" />
            
            <!--
            Stack panel containing the select game options and, once selected, displaying the
            currently selected game.
            -->
            <StackPanel Orientation="Vertical" Grid.Column="4" VerticalAlignment="Center" Width="280" HorizontalAlignment="Right">
                <Grid Margin="3,2" x:Name="pnlSelectGame" VerticalAlignment="Center">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>

                    <TextBlock Text="Select Game: " FontWeight="Bold"
                               HorizontalAlignment="Right" VerticalAlignment="Center" />

                    <StackPanel Grid.Column="2" HorizontalAlignment="Center"
                                Orientation="Horizontal" VerticalAlignment="Center">
                        <StackPanel.IsEnabled>
                            <MultiBinding Converter="{StaticResource BoolMultiConverter}" ConverterParameter="And">
                                <Binding Path="GameDataWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                <Binding Path="AddPolyWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                <Binding Path="UpdateLayerVisibilityWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                <Binding Path="RemovePolyWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                            </MultiBinding>
                        </StackPanel.IsEnabled>
                        <StackPanel.Resources>
                            <Style TargetType="Button">
                                <Setter Property="Margin" Value="2,0" />
                                <Setter Property="Width" Value="60" />
                            </Style>
                        </StackPanel.Resources>
                        <Button Content="KotOR 1" Command="{StaticResource Commands.LoadK1}">
                            <Button.IsEnabled>
                                <MultiBinding Converter="{StaticResource BoolMultiConverter}" ConverterParameter="Or">
                                    <Binding Path="SelectedGame" Converter="{StaticResource StringEqualsConverter}" ConverterParameter="Kotor 2" />
                                    <Binding Path="SelectedGame" Converter="{StaticResource StringEqualsConverter}" ConverterParameter="N/A" />
                                </MultiBinding>
                            </Button.IsEnabled>
                        </Button>
                        <Button Content="KotOR 2" Command="{StaticResource Commands.LoadK2}">
                            <Button.IsEnabled>
                                <MultiBinding Converter="{StaticResource BoolMultiConverter}" ConverterParameter="Or">
                                    <Binding Path="SelectedGame" Converter="{StaticResource StringEqualsConverter}" ConverterParameter="Kotor 1" />
                                    <Binding Path="SelectedGame" Converter="{StaticResource StringEqualsConverter}" ConverterParameter="N/A" />
                                </MultiBinding>
                            </Button.IsEnabled>
                        </Button>
                        <Button Content="Custom" Command="{StaticResource Commands.LoadCustom}">
                            <Button.IsEnabled>
                                <Binding Path="SelectedGame" Converter="{StaticResource StringEqualsConverter}" ConverterParameter="N/A" />
                            </Button.IsEnabled>
                        </Button>
                    </StackPanel>
                </Grid>

                <Grid Margin="3,2" x:Name="pnlSelectedGame" VerticalAlignment="Center" d:Visibility="Collapsed">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <Grid.Resources>
                        <Style TargetType="TextBlock">
                            <Setter Property="FontWeight" Value="Bold" />
                            <Setter Property="VerticalAlignment" Value="Center" />
                        </Style>
                    </Grid.Resources>

                    <TextBlock Text="Selected Game: " />
                    <TextBlock Text="{Binding SelectedGame}" Grid.Column="2" Margin="0,0,10,0" />

                    <Button Content="Swap Game" Grid.Column="3" Width="75"
                                Command="{StaticResource Commands.SwapGame}">
                        <Button.IsEnabled>
                            <MultiBinding Converter="{StaticResource BoolMultiConverter}" ConverterParameter="And">
                                <Binding Path="IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                <Binding Path="GameDataWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                <Binding Path="AddPolyWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                <Binding Path="UpdateLayerVisibilityWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                <Binding Path="RemovePolyWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                            </MultiBinding>
                        </Button.IsEnabled>
                    </Button>
                </Grid>
            </StackPanel>
        </Grid>

        <!--
        Grid containing the canvas and the options panel.
        -->
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />      <!-- Canvas -->
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            
            <!--
            ToolBar with shortcut buttons for canvas display options.
            -->
            <ToolBarTray Background="White">
                <ToolBarTray.Resources>
                    <Style TargetType="Image">
                        <Setter Property="Height" Value="20" />
                        <Setter Property="Width"  Value="20" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False">
                                <Setter Property="Opacity" Value="0.5" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                    <Style TargetType="ToggleButton">
                        <Setter Property="Margin" Value="5,0" />
                    </Style>
                </ToolBarTray.Resources>
                <ToolBar Background="GhostWhite">
                    <ToggleButton
                        Margin="2,0"
                        ToolTip="Show walkable faces. (Ctrl+W)"
                        IsChecked="{Binding ShowWalkableFaces, Mode=TwoWay}"
                        IsEnabled="{Binding IsBusy, Converter={StaticResource InverseBooleanConverter}}"
                        Command="{StaticResource Commands.ShowWalkable}"
                        >
                        <Image Source="../Resources/Icons/WalkIcon.png" />
                    </ToggleButton>
                    <ToggleButton
                        Margin="2,0"
                        ToolTip="Show non-walkable faces. (Ctrl+Shift+W)"
                        IsChecked="{Binding ShowNonWalkableFaces, Mode=TwoWay}"
                        IsEnabled="{Binding IsBusy, Converter={StaticResource InverseBooleanConverter}}"
                        Command="{StaticResource Commands.ShowNonWalkable}"
                        >
                        <Image Source="../Resources/Icons/NonWalkIcon.png" />
                    </ToggleButton>
                    <Separator />
                    <ToggleButton
                        Margin="2,0"
                        ToolTip="Show default spawn points. (Ctrl+D)"
                        IsChecked="{Binding ShowDefaultSpawnPoints, Mode=TwoWay}"
                        IsEnabled="{Binding IsBusy, Converter={StaticResource InverseBooleanConverter}}"
                        Command="{StaticResource Commands.ShowDefaultSpawnPoints}"
                        >
                        <Image Source="../Resources/Icons/DefaultSpawnPointIcon.png" />
                    </ToggleButton>
                    <ToggleButton
                        Margin="2,0"
                        ToolTip="Show gather party points. (Ctrl+G)"
                        IsChecked="{Binding ShowTransAbortPoints, Mode=TwoWay}"
                        IsEnabled="{Binding IsBusy, Converter={StaticResource InverseBooleanConverter}}"
                        Command="{StaticResource Commands.ShowTransAbort}"
                        >
                        <Image Source="../Resources/Icons/GatherPartyIcon.png" />
                    </ToggleButton>
                    <ToggleButton
                        Margin="2,0"
                        ToolTip="Show gather party regions. (Ctrl+Shift+G)"
                        IsChecked="{Binding ShowTransAbortRegions, Mode=TwoWay}"
                        Command="{StaticResource Commands.ShowTransAbortRegion}">
                        <!-- Code for multiple module display with GP regions. -->
                        <!--IsEnabled="{Binding IsBusy, Converter={StaticResource InverseBooleanConverter}}"-->
                        <ToggleButton.IsEnabled>
                            <MultiBinding Converter="{StaticResource BoolMultiConverter}" ConverterParameter="And">
                                <Binding Path="IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                <Binding Path="OnRims.Count" Converter="{StaticResource IntLessEqualConverter}" ConverterParameter="1" />
                            </MultiBinding>
                        </ToggleButton.IsEnabled>
                        <Image Source="../Resources/Icons/GatherPartyRegionIcon.png" />
                    </ToggleButton>
                    <!-- Code for multiple module display with GP regions. -->
                    <!--<ComboBox ItemsSource="{Binding OnRims}"
                              Width="90" IsEditable="False"
                              SelectedItem="{Binding SelectedGatherPartyRim, Mode=TwoWay}"
                              SelectionChanged="SelectedGatherPartyRim_Changed"
                              Background="#FFF8F8FF"
                              IsEnabled="{Binding IsBusy, Converter={StaticResource InverseBooleanConverter}}"
                              />-->
                    <Separator />
                    <ToggleButton
                        x:Name="MouseHoverToggleButton"
                        Margin="2,0"
                        ToolTip="Identify RIM data under mouse."
                        IsChecked="{Binding ShowRimDataUnderMouse, Mode=OneWay}"
                        Command="{StaticResource Commands.RunMouseHoverWorker}"
                        >
                        <Image Source="../Resources/Icons/MouseHoverIcon.png" />
                    </ToggleButton>
                    <ToggleButton Margin="2,0" ToolTip="Show gather party range around left click point."
                                  IsChecked="{Binding ShowLeftClickGatherPartyRange, Mode=TwoWay}">
                        <Image Source="../Resources/Icons/GatherPartyRangeLeftClickIcon.png" />
                    </ToggleButton>
                    <ToggleButton
                        Margin="2,0"
                        ToolTip="Show displaced loading zone (DLZ) lines. (Ctrl+Z)"
                        IsChecked="{Binding ShowDlzLines, Mode=TwoWay}"
                        IsEnabled="{Binding IsBusy, Converter={StaticResource InverseBooleanConverter}}"
                        Command="{StaticResource Commands.ShowDlzLines}"
                        >
                        <Image Source="../Resources/Icons/DlzIcon.png" />
                    </ToggleButton>
                    <Separator />
                    <ToggleButton
                        x:Name="LivePositionToggleButton"
                        Margin="2,0"
                        ToolTip="Show live game position."
                        IsChecked="{Binding ShowLivePosition, Mode=TwoWay}"
                        Command="{StaticResource Commands.ShowLivePosition}"
                        >
                        <Image Source="../Resources/Icons/LivePositionIcon.png" />
                    </ToggleButton>
                    <ToggleButton Margin="2,0" ToolTip="View follows live position."
                                  IsChecked="{Binding ViewFollowsLivePosition, Mode=TwoWay}">
                        <Image Source="../Resources/Icons/ViewFollowsLivePositionIcon.png" />
                    </ToggleButton>
                    <ToggleButton Margin="2,0" ToolTip="Show current live module."
                                  IsChecked="{Binding ShowCurrentLiveModule, Mode=TwoWay}">
                        <Image Source="../Resources/Icons/ShowCurrentModuleIcon.png" />
                    </ToggleButton>
                    <ToggleButton Margin="2,0" ToolTip="Hide previous live module."
                                  IsChecked="{Binding HidePreviousLiveModule, Mode=TwoWay}">
                        <Image Source="../Resources/Icons/HidePreviousModuleIcon.png" />
                    </ToggleButton>
                    <ToggleButton Margin="2,0" ToolTip="Show gather party range."
                                  IsChecked="{Binding ShowGatherPartyRange, Mode=TwoWay}">
                        <Image Source="../Resources/Icons/GatherPartyRangeIcon.png" />
                    </ToggleButton>
                    <ToggleButton Margin="2,0" ToolTip="Lock gather party range in place."
                                  IsChecked="{Binding LockGatherPartyRange, Mode=TwoWay}">
                        <Image Source="../Resources/Icons/GatherPartyRangeLockIcon.png" />
                    </ToggleButton>
                    <ToggleButton Margin="2,0" ToolTip="Show live coordinates on canvas."
                                  IsChecked="{Binding ShowLivePositionCoordinates, Mode=TwoWay}">
                        <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                            <StackPanel.Resources>
                                <Style TargetType="TextBlock">
                                    <Setter Property="Margin" Value="1,0" />
                                </Style>
                            </StackPanel.Resources>
                            <TextBlock>(</TextBlock>
                            <TextBlock
                                Visibility="{Binding ShowLivePosition, Converter={StaticResource BoolToVisibilityConverter}}"
                                Text="{Binding LivePositionPoint.X, StringFormat=N3}" />
                            <TextBlock>,</TextBlock>
                            <TextBlock
                                Visibility="{Binding ShowLivePosition, Converter={StaticResource BoolToVisibilityConverter}}"
                                Text="{Binding LivePositionPoint.Y, StringFormat=N3}" />
                            <TextBlock>)</TextBlock>
                        </StackPanel>
                    </ToggleButton>
                </ToolBar>
            </ToolBarTray>

            <!--
            Zoom Controls
            -->
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" Grid.Column="1">
                <StackPanel.Resources>
                    <Style TargetType="Button">
                        <Setter Property="Margin" Value="0" />
                        <Setter Property="Height" Value="20" />
                        <Setter Property="Width" Value="20" />
                        <Setter Property="Padding" Value="0,0,0,2" />
                    </Style>
                </StackPanel.Resources>

                <!-- The content zoom selector. -->
                <ComboBox
                    IsEditable="True"
                    Width="70" Height="22"
                    Text="{Binding
                        ElementName=zoomAndPanControl,
                        Path=ContentScale,
                        Converter={StaticResource scaleTextToPercentConverter},
                        Mode=TwoWay}"
                    HorizontalContentAlignment="Right"
                    Margin="10,0"
                    Padding="0,2"
                    >
                    <ComboBox.Resources>
                        <DataTemplate x:Key="PercentageTemplate">
                            <StackPanel Orientation="Horizontal">
                                <TextBlock Text="{Binding}" />
                                <TextBlock Text=" %" />
                            </StackPanel>
                        </DataTemplate>
                        <Style TargetType="ComboBoxItem">
                            <Setter Property="HorizontalContentAlignment" Value="Right" />
                            <Setter Property="Padding" Value="0,0" />
                            <Setter Property="Margin" Value="0,0,5,0" />
                            <Setter Property="ContentTemplate" Value="{StaticResource PercentageTemplate}" />
                        </Style>
                    </ComboBox.Resources>

                    <ComboBoxItem>10</ComboBoxItem>
                    <ComboBoxItem>100</ComboBoxItem>
                    <ComboBoxItem>300</ComboBoxItem>
                    <ComboBoxItem>1,000</ComboBoxItem>
                    <ComboBoxItem>1,500</ComboBoxItem>
                    <ComboBoxItem>2,000</ComboBoxItem>
                    <ComboBoxItem>3,000</ComboBoxItem>
                    <ComboBoxItem>4,000</ComboBoxItem>
                    <ComboBoxItem>5,000</ComboBoxItem>
                </ComboBox>

                <!-- Button to zoom out. -->
                <Button Content="-" Margin="0"
                        FontWeight="SemiBold" Foreground="Black"
                        Command="{StaticResource Commands.ZoomOut}" />

                <!-- Slider to change the current zoom level. -->
                <Slider Minimum="10" Maximum="5000" Width="200"
                        SmallChange="10" LargeChange="20" 
                        TickFrequency="100" TickPlacement="TopLeft"
                        Value="{Binding ElementName=zoomAndPanControl, Path=ContentScale,
                                        Converter={StaticResource scaleToPercentConverter}}"
                        />

                <!-- Button to zoom in. -->
                <Button Content="+" Margin="0,0,15,0"
                        FontWeight="SemiBold" Foreground="Black"
                        Command="{StaticResource Commands.ZoomIn}" />
            </StackPanel>

            <!--
            LEFT PANEL | CANVAS | RIGHT PANEL
            -->
            <Grid Grid.ColumnSpan="2" Grid.Row="1" Margin="0,0,0,5">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />   <!-- Left Panel Buttons -->
                    <ColumnDefinition Width="Auto" x:Name="columnLeftPanel" />  <!-- Left Panel -->
                    <ColumnDefinition Width="Auto" />   <!-- GridSplitter -->
                    <ColumnDefinition Width="*" />      <!-- Canvas -->
                    <ColumnDefinition Width="Auto" />   <!-- GridSplitter -->
                    <ColumnDefinition Width="Auto" x:Name="columnRightPanel" /> <!-- Right Panel -->
                    <ColumnDefinition Width="Auto" />   <!-- Right Panel Buttons -->
                </Grid.ColumnDefinitions>
                <Grid.Resources>
                    <Style TargetType="ListViewItem" x:Key="MatchItemStyle" BasedOn="{StaticResource BaseItemStyle}">
                        <EventSetter Event="MouseDoubleClick" Handler="MatchItem_DoubleClick" />
                    </Style>
                    <Style TargetType="ToggleButton" x:Key="panelHorizontalToggleButton">
                        <Setter Property="Background" Value="Transparent" />
                        <Setter Property="BorderBrush" Value="#FF707070" />
                        <Setter Property="BorderThickness" Value="0,0,0,4" />
                        <Setter Property="Margin" Value="0,0,3,0" />
                        <Setter Property="Height" Value="22" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="ToggleButton">
                                    <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                                    </Border>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="BorderBrush" Value="MediumSlateBlue" />
                                <Setter Property="Background" Value="Lavender" />
                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="BorderThickness" Value="1,1,1,4" />
                                <Setter Property="Margin" Value="-1,-1,2,0" />
                                <Setter Property="BorderBrush" Value="Indigo" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                    <Style TargetType="ToggleButton" x:Key="panelToggleButton">
                        <Setter Property="Background" Value="Transparent" />
                        <Setter Property="BorderBrush" Value="#FF707070" />
                        <Setter Property="BorderThickness" Value="0,0,0,4" />
                        <Setter Property="Margin" Value="0,0,0,4" />
                        <Setter Property="Height" Value="22" />
                        <Setter Property="Width" Value="80" />
                        <Setter Property="LayoutTransform">
                            <Setter.Value>
                                <RotateTransform Angle="90" />
                            </Setter.Value>
                        </Setter>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="ToggleButton">
                                    <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                                    </Border>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="BorderBrush" Value="MediumSlateBlue" />
                                <Setter Property="Background" Value="Lavender" />
                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="BorderBrush" Value="Indigo" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Grid.Resources>
                
                <!--
                Left Panel Buttons Column
                -->
                <StackPanel Grid.Column="0" Orientation="Vertical">
                    <ToggleButton Content="Coordinates"
                                  IsChecked="{Binding ShowCoordinatePanel}"
                                  Click="CoordinatePanelButton_Click"
                                  Style="{StaticResource panelToggleButton}"
                                  />
                    <ToggleButton Content="RIM Triggers"
                                  IsChecked="{Binding ShowRimDataPanel}"
                                  Click="RimDataPanelButton_Click"
                                  Style="{StaticResource panelToggleButton}"
                                  />
                    <ToggleButton Content="Distance"
                                  IsChecked="{Binding ShowDistancePanel}"
                                  Click="DistancePanelButton_Click"
                                  Style="{StaticResource panelToggleButton}"
                                  />
                    <ToggleButton Content="Live Tools"
                                  IsChecked="{Binding ShowToolsPanel}"
                                  Click="ToolsPanelButton_Click"
                                  Style="{StaticResource panelToggleButton}"
                                  />
                </StackPanel>

                <!--
                Left Panel: Coordinates Panel
                -->
                <Grid x:Name="coordinatePanel" Grid.Column="1"
                      Visibility="{Binding ShowCoordinatePanel,
                            Converter={StaticResource BoolToVisibilityConverter},
                            FallbackValue=Collapsed, TargetNullValue=Collapsed}">
                    <Grid Margin="4,0,0,0">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" x:Name="rowLeftMatches" />
                            <RowDefinition Height="*" x:Name="rowRightMatches" />
                            <RowDefinition Height="*" x:Name="rowBothMatches" />
                        </Grid.RowDefinitions>
                        <Grid.Resources>
                            <Style TargetType="Grid">
                                <Setter Property="Margin" Value="0,6,0,0" />
                                <!--<Setter Property="Margin" Value="0,2" />-->
                            </Style>
                            <Style TargetType="StackPanel">
                                <Setter Property="Margin" Value="5,0" />
                                <Setter Property="Orientation" Value="Horizontal" />
                            </Style>
                            <Style TargetType="Ellipse">
                                <Setter Property="Height" Value="8" />
                                <Setter Property="Width" Value="8" />
                                <Setter Property="Stroke" Value="Black" />
                                <Setter Property="Margin" Value="0,0,5,0" />
                            </Style>
                            <Style TargetType="ListView">
                                <Setter Property="Margin" Value="0,2,0,0" />
                                <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
                                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Visible" />
                                <Setter Property="FontSize" Value="12" />
                            </Style>
                            <Style TargetType="ListViewItem">
                                <Setter Property="Background" Value="Transparent" />
                                <Setter Property="FontSize" Value="12" />
                                <Setter Property="Foreground" Value="Black" />
                            </Style>
                            <Style TargetType="ToggleButton">
                                <Setter Property="Content" Value="(x,y)" />
                                <Setter Property="FontSize" Value="11" />
                                <Setter Property="Background" Value="Transparent" />
                                <Setter Property="BorderBrush" Value="Transparent" />
                                <Setter Property="Margin" Value="6,2,0,2" />
                                <Setter Property="Padding" Value="0,-3,0,0" />
                                <Setter Property="VerticalContentAlignment" Value="Center" />
                            </Style>
                            <Style TargetType="Rectangle" x:Key="colorRectangle">
                                <Setter Property="Margin" Value="0" />
                                <Setter Property="Height" Value="14" />
                                <Setter Property="Width" Value="14" />
                                <Setter Property="Stroke" Value="Black" />
                                <Setter Property="StrokeThickness" Value="0.5" />
                            </Style>
                            <DataTemplate x:Key="dtPointRimColorTemplate">
                                <Grid Margin="-4">
                                    <Rectangle Style="{StaticResource colorRectangle}">
                                        <Rectangle.Fill>
                                            <MultiBinding Converter="{StaticResource MatchRectFillMultiConverter}">
                                                <Binding />
                                                <Binding ElementName="thisWindow" Path="OnRims" />
                                                <Binding Path="Rim.MeshColor" />
                                                <Binding ElementName="thisWindow" Path="OffRims" />
                                            </MultiBinding>
                                        </Rectangle.Fill>
                                    </Rectangle>
                                </Grid>
                            </DataTemplate>
                        </Grid.Resources>

                        <!-- Match coordinates button. -->
                        <Button Grid.Row="0" Content="Update Matches" Margin="0,4,0,0"
                                Command="{StaticResource Commands.FindMatchingCoords}">
                            <Button.IsEnabled>
                                <MultiBinding Converter="{StaticResource BoolMultiConverter}" ConverterParameter="And">
                                    <Binding Path="OnRims.Count" Converter="{StaticResource IntGreaterEqualConverter}" ConverterParameter="1" />
                                    <Binding Path="GameDataWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                    <Binding Path="AddPolyWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                    <Binding Path="UpdateLayerVisibilityWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                    <Binding Path="RemovePolyWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                    <Binding Path="LeftOrRightClickPointVisible" />
                                </MultiBinding>
                            </Button.IsEnabled>
                        </Button>

                        <!-- No point set text. -->
                        <TextBlock Grid.Row="1" Margin="5,5,5,0" TextWrapping="Wrap"
                                   Text="Place a point by double clicking to begin matching walkmesh coordinates.">
                            <TextBlock.Visibility>
                                <MultiBinding Converter="{StaticResource OrInverseBoolToVisibilityMultiConverter}"
                                              FallbackValue="Collapsed" TargetNullValue="Collapsed">
                                    <Binding Path="LeftClickPointVisible" />
                                    <Binding Path="RightClickPointVisible" />
                                </MultiBinding>
                            </TextBlock.Visibility>
                        </TextBlock>

                        <!-- Modules matching left click point. -->
                        <Grid x:Name="exLeftClickPoint" Grid.Row="1"
                                  Visibility="{Binding LeftClickPointVisible, Converter={StaticResource BoolToVisibilityConverter}}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <StackPanel>
                                <Ellipse Fill="Black" />
                                <TextBlock Text="Black Point" FontWeight="SemiBold" />
                                <ToggleButton IsChecked="{Binding ShowLeftClickPointCoordinates}" />
                            </StackPanel>

                            <Button HorizontalAlignment="Right" Background="Transparent"
                                    Padding="2,0" Width="100" Click="LeftCoordButton_Click"
                                    Content="{Binding LastLeftClickModuleCoords, Converter={StaticResource PointToTextConverter}}"
                                    />

                            <ListView x:Name="lvLeftPointMatches" Grid.Row="1"
                                      ItemContainerStyle="{StaticResource MatchItemStyle}"
                                      ItemsSource="{Binding LeftPointMatches}"
                                      >
                                <ListView.View>
                                    <GridView>
                                        <GridViewColumn Width="18" Header="" CellTemplate="{StaticResource dtPointRimColorTemplate}" />
                                        <GridViewColumn Width="30" Header="">
                                            <GridViewColumn.CellTemplate>
                                                <DataTemplate>
                                                    <TextBlock Text="{Binding Walkability}" />
                                                </DataTemplate>
                                            </GridViewColumn.CellTemplate>
                                        </GridViewColumn>
                                        <GridViewColumn Width="60" DisplayMemberBinding="{Binding Rim.FileName}" Header="Rim" />
                                        <GridViewColumn Width="40" DisplayMemberBinding="{Binding Rim.Planet}" Header="Planet" />
                                        <GridViewColumn Width="110" DisplayMemberBinding="{Binding Rim.CommonName}" Header="Common Name" />
                                    </GridView>
                                </ListView.View>
                            </ListView>
                        </Grid>

                        <!-- Modules matching right click point. -->
                        <Grid x:Name="exRightClickPoint" Grid.Row="2"
                              Visibility="{Binding RightClickPointVisible, Converter={StaticResource BoolToVisibilityConverter}}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>

                            <StackPanel>
                                <Ellipse Fill="White" />
                                <TextBlock Text="White Point" FontWeight="SemiBold" />
                                <ToggleButton IsChecked="{Binding ShowRightClickPointCoordinates}" />
                            </StackPanel>

                            <Button HorizontalAlignment="Right" Background="Transparent"
                                    Padding="2,0" Width="100" Click="RightCoordButton_Click"
                                    Content="{Binding LastRightClickModuleCoords, Converter={StaticResource PointToTextConverter}}"
                                    />

                            <ListView x:Name="lvRightPointMatches" Grid.Row="1"
                                      ItemContainerStyle="{StaticResource MatchItemStyle}"
                                      ItemsSource="{Binding RightPointMatches}">
                                <ListView.View>
                                    <GridView>
                                        <GridViewColumn Width="18" Header="" CellTemplate="{StaticResource dtPointRimColorTemplate}" />
                                        <GridViewColumn Width="30" Header="">
                                            <GridViewColumn.CellTemplate>
                                                <DataTemplate>
                                                    <TextBlock Text="{Binding Walkability}" />
                                                </DataTemplate>
                                            </GridViewColumn.CellTemplate>
                                        </GridViewColumn>
                                        <GridViewColumn Width="60" DisplayMemberBinding="{Binding Rim.FileName}" Header="Rim" />
                                        <GridViewColumn Width="40" DisplayMemberBinding="{Binding Rim.Planet}" Header="Planet" />
                                        <GridViewColumn Width="110" DisplayMemberBinding="{Binding Rim.CommonName}" Header="Common Name" />
                                    </GridView>
                                </ListView.View>
                            </ListView>
                        </Grid>

                        <!-- Modules matching both left and right click points. -->
                        <Grid x:Name="exBothPoints" Grid.Row="3">
                            <Grid.Visibility>
                                <MultiBinding Converter="{StaticResource AndBoolToVisibilityMultiConverter}">
                                    <Binding Path="LeftClickPointVisible" />
                                    <Binding Path="RightClickPointVisible" />
                                </MultiBinding>
                            </Grid.Visibility>

                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>

                            <StackPanel>
                                <Ellipse Fill="Black" />
                                <Ellipse Fill="White" />
                                <TextBlock Text="Both Points" FontWeight="SemiBold" />
                            </StackPanel>

                            <ListView x:Name="lvBothPointMatches" Grid.Row="1"
                                      ItemContainerStyle="{StaticResource MatchItemStyle}"
                                      ItemsSource="{Binding BothPointMatches}">
                                <ListView.View>
                                    <GridView>
                                        <GridViewColumn Width="18" Header="" CellTemplate="{StaticResource dtPointRimColorTemplate}" />
                                        <GridViewColumn Width="30" Header="">
                                            <GridViewColumn.CellTemplate>
                                                <DataTemplate>
                                                    <TextBlock Text="{Binding Walkability}" />
                                                </DataTemplate>
                                            </GridViewColumn.CellTemplate>
                                        </GridViewColumn>
                                        <GridViewColumn Width="60" DisplayMemberBinding="{Binding Rim.FileName}" Header="Rim" />
                                        <GridViewColumn Width="40" DisplayMemberBinding="{Binding Rim.Planet}" Header="Planet" />
                                        <GridViewColumn Width="110" DisplayMemberBinding="{Binding Rim.CommonName}" Header="Common Name" />
                                    </GridView>
                                </ListView.View>
                            </ListView>
                        </Grid>
                    </Grid>
                </Grid>

                <!--
                Left Panel: RIM Data Panel
                -->
                <Grid x:Name="rimDataPanel" Grid.Column="1"
                      Visibility="{Binding ShowRimDataPanel,
                            Converter={StaticResource BoolToVisibilityConverter},
                            FallbackValue=Collapsed, TargetNullValue=Collapsed}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    
                    <!-- Sub Tabs Buttons -->
                    <StackPanel Orientation="Vertical" Margin="2,0,0,0">
                        <ToggleButton IsChecked="{Binding ShowRimDataDoors}"
                                      Style="{StaticResource panelToggleButton}"
                                      Click="RimDataShowHideButton_Click"
                                      Tag="Door">
                            <TextBlock><Run>Doors:</Run> <TextBlock Margin="0,1,0,0"
                                Text="{Binding RimDoors.Count, FallbackValue=0}" />
                            </TextBlock>
                        </ToggleButton>
                        <ToggleButton IsChecked="{Binding ShowRimDataTriggers}"
                                      Style="{StaticResource panelToggleButton}"
                                      Click="RimDataShowHideButton_Click"
                                      Tag="Trigger">
                            <TextBlock><Run>Triggers:</Run> <TextBlock Margin="0,1,0,0"
                                Text="{Binding RimTriggers.Count, FallbackValue=0}" />
                            </TextBlock>
                        </ToggleButton>
                        <ToggleButton IsChecked="{Binding ShowRimDataTraps}"
                                      Style="{StaticResource panelToggleButton}"
                                      Click="RimDataShowHideButton_Click"
                                      Tag="Trap" Width="70">
                            <TextBlock><Run>Traps:</Run> <TextBlock Margin="0,1,0,0"
                                Text="{Binding RimTraps.Count, FallbackValue=0}" />
                            </TextBlock>
                        </ToggleButton>
                        <ToggleButton IsChecked="{Binding ShowRimDataZones}"
                                      Style="{StaticResource panelToggleButton}"
                                      Click="RimDataShowHideButton_Click"
                                      Tag="Zone" Width="70">
                            <TextBlock><Run>Zones:</Run> <TextBlock Margin="0,1,0,0"
                                Text="{Binding RimZones.Count, FallbackValue=0}" />
                            </TextBlock>
                        </ToggleButton>
                        <ToggleButton IsChecked="{Binding ShowRimDataEncounters}"
                                      Style="{StaticResource panelToggleButton}"
                                      Click="RimDataShowHideButton_Click"
                                      Tag="Encounter" Width="90">
                            <TextBlock><Run>Encounters:</Run> <TextBlock Margin="0,1,0,0"
                                Text="{Binding RimEncounters.Count, FallbackValue=0}" />
                            </TextBlock>
                        </ToggleButton>
                    </StackPanel>
                    
                    <Grid Margin="4,0,0,0" Grid.Column="1">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="4*" x:Name="rowRimDoor" />
                            <RowDefinition Height="5*" x:Name="rowRimTrigger" />
                            <RowDefinition Height="3*" x:Name="rowRimTrap" />
                            <RowDefinition Height="3*" x:Name="rowRimZone" />
                            <RowDefinition Height="3*" x:Name="rowRimEncounter" />
                        </Grid.RowDefinitions>
                        <Grid.Resources>
                            <Style TargetType="ListViewItem" x:Key="RimDataInfoItemStyle" BasedOn="{StaticResource BaseItemStyle}">
                                <EventSetter Event="MouseDoubleClick" Handler="lvRimDataInfo_DoubleClick" />
                                <EventSetter Event="KeyDown" Handler="lvRimDataInfo_KeyDown" />
                            </Style>
                            <Style TargetType="Grid">
                                <!--<Setter Property="Margin" Value="0,4,0,0" />-->
                            </Style>
                            <Style TargetType="StackPanel">
                                <Setter Property="Orientation" Value="Horizontal" />
                                <Setter Property="VerticalAlignment" Value="Center" />
                            </Style>
                            <Style TargetType="Ellipse">
                                <Setter Property="Height" Value="8" />
                                <Setter Property="Width" Value="8" />
                                <Setter Property="Stroke" Value="Black" />
                                <Setter Property="Margin" Value="0,0,5,0" />
                            </Style>
                            <Style TargetType="ListView">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
                                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Visible" />
                                <Setter Property="FontSize" Value="12" />
                            </Style>
                            <Style TargetType="ListViewItem">
                                <Setter Property="Background" Value="Transparent" />
                                <Setter Property="FontSize" Value="12" />
                                <Setter Property="Foreground" Value="Black" />
                            </Style>
                            <Style TargetType="Rectangle" x:Key="colorRectangle">
                                <Setter Property="Margin" Value="0" />
                                <Setter Property="Height" Value="14" />
                                <Setter Property="Width" Value="14" />
                                <Setter Property="Stroke" Value="Black" />
                                <Setter Property="StrokeThickness" Value="0.5" />
                            </Style>
                            <Style TargetType="CheckBox" x:Key="cbRimDataAutoShow">
                                <Setter Property="Margin" Value="0,2,4,2" />
                                <Setter Property="VerticalAlignment" Value="Center" />
                                <Setter Property="VerticalContentAlignment" Value="Center" />
                                <Setter Property="ToolTip" Value="Automatically show this category of RIM trigger when a new walkmesh is added to the canvas." />
                            </Style>
                            <Style TargetType="Button" x:Key="btnRimDataShowHide">
                                <Setter Property="Padding" Value="2,1" />
                                <!--<Setter Property="Width" Value="22" />-->
                                <Setter Property="FontSize" Value="11" />
                                <Setter Property="HorizontalContentAlignment" Value="Center" />
                            </Style>
                            <Style TargetType="ToggleButton" x:Key="btnRimDataDlz">
                                <Setter Property="Margin" Value="0" />
                                <Setter Property="HorizontalContentAlignment" Value="Center" />
                                <Setter Property="Command" Value="{StaticResource Commands.ShowRimDataDlzLines}" />
                                <Setter Property="ToolTip" Value="Show / hide DLZs for this category of RIM trigger." />
                            </Style>
                            <Style TargetType="Button" x:Key="btnRimDataShow" BasedOn="{StaticResource btnRimDataShowHide}">
                                <Setter Property="Margin" Value="4,0,0,0" />
                                <Setter Property="Command" Value="{StaticResource Commands.ShowAllOfRimData}" />
                                <Setter Property="ToolTip" Value="Show all triggers in this category." />
                            </Style>
                            <Style TargetType="Button" x:Key="btnRimDataHide" BasedOn="{StaticResource btnRimDataShowHide}">
                                <Setter Property="Margin" Value="4,0,0,0" />
                                <Setter Property="Command" Value="{StaticResource Commands.HideAllOfRimData}" />
                                <Setter Property="ToolTip" Value="Hide all triggers in this category." />
                            </Style>
                            <DataTemplate x:Key="dtRimDataInfo">
                                <Grid Margin="-4">
                                    <Button Margin="0" Padding="0" Background="Transparent"
                                            BorderBrush="Transparent" BorderThickness="0"
                                            Click="RimDataInfoColorButton_Click">
                                        <Button.Template>
                                            <ControlTemplate TargetType="Button">
                                                <Border Background="{TemplateBinding Background}"
                                                        BorderBrush="{TemplateBinding BorderBrush}"
                                                        BorderThickness="{TemplateBinding BorderThickness}">
                                                    <ContentPresenter
                                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                                </Border>
                                            </ControlTemplate>
                                        </Button.Template>
                                        <Rectangle Margin="0" Height="14" Width="14"
                                                   Fill="{Binding MeshColor}" StrokeThickness="1">
                                            <Rectangle.Style>
                                                <Style TargetType="Rectangle">
                                                    <Style.Triggers>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter Property="Stroke"
                                                                    Value="{Binding MeshColor,
                                                                        Converter={StaticResource BlackIfTransparentConverter},
                                                                        ConverterParameter={StaticResource brushRed},
                                                                        FallbackValue=Black, TargetNullValue=Black}"
                                                                    />
                                                        </Trigger>
                                                        <Trigger Property="IsMouseOver" Value="False">
                                                            <Setter Property="Stroke" Value="Black" />
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </Rectangle.Style>
                                        </Rectangle>
                                    </Button>
                                </Grid>
                            </DataTemplate>
                        </Grid.Resources>
                        
                        <!-- Active RIM Filter -->
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            
                            <CheckBox VerticalAlignment="Center" Margin="0,0,20,0" Content="Filter by RIM"
                                      IsChecked="{Binding DoRimDataFilter}" Click="RimDataFilter_ToggleChanged" />
                            <ComboBox x:Name="cbRimDataFilterBy" Grid.Column="1" ItemsSource="{Binding OnRims}"
                                      IsEnabled="{Binding DoRimDataFilter}"
                                      SelectedItem="{Binding RimDataFilter_SelectedItem}"
                                      SelectionChanged="RimDataFilter_SelectionChanged" />
                            <Border Grid.ColumnSpan="2" Grid.Row="1" BorderBrush="Black" BorderThickness="0,0,0,1" Margin="0,5" />
                        </Grid>

                        <!-- RIM Doors -->
                        <Grid x:Name="rimDoorGrid" Grid.Row="1">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>

                            <StackPanel Margin="0,0,0,2">
                                <CheckBox Style="{StaticResource cbRimDataAutoShow}"
                                          IsChecked="{Binding ShowDoorsOnAddRim, Mode=TwoWay}">
                                    <TextBlock>
                                        <Run>Doors (</Run>
                                        <TextBlock Margin="-3,0" Text="{Binding RimDoors.Count, FallbackValue=0, TargetNullValue=0}" />
                                        <Run>)</Run>
                                    </TextBlock>
                                </CheckBox>
                            </StackPanel>

                            <StackPanel HorizontalAlignment="Right">
                                <ToggleButton Tag="{Binding RimDoors}"
                                              IsChecked="{Binding ShowRimDataDoorsDlzLines, Mode=TwoWay}"
                                              Style="{StaticResource btnRimDataDlz}"
                                              Command="{StaticResource Commands.ShowRimDataDlzLines}">
                                    <ToggleButton.Content>
                                        <Image Width="15" Source="../Resources/Icons/DlzIcon.png" />
                                    </ToggleButton.Content>
                                </ToggleButton>
                                <Button Tag="{Binding RimDoors}"
                                        Style="{StaticResource btnRimDataShow}"
                                        Command="{StaticResource Commands.ShowAllOfRimData}">
                                    <Button.Content>
                                        <Image Width="15" Source="../Resources/Icons/ShowCurrentModuleIcon.png" />
                                    </Button.Content>
                                    <Button.IsEnabled>
                                        <MultiBinding Converter="{StaticResource BoolMultiConverter}" ConverterParameter="And">
                                            <Binding Path="RimDoors.Count" Converter="{StaticResource IntGreaterEqualConverter}" ConverterParameter="1" />
                                            <Binding Path="HiddenRimDoors" Converter="{StaticResource IntGreaterEqualConverter}" ConverterParameter="1" />
                                            <Binding Path="GameDataWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                            <Binding Path="AddPolyWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                            <Binding Path="UpdateLayerVisibilityWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                            <Binding Path="RemovePolyWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                        </MultiBinding>
                                    </Button.IsEnabled>
                                </Button>
                                <Button Tag="{Binding RimDoors}"
                                        Style="{StaticResource btnRimDataHide}"
                                        Command="{StaticResource Commands.HideAllOfRimData}">
                                    <Button.Content>
                                        <Image Width="15" Source="../Resources/Icons/HidePreviousModuleIcon.png" />
                                    </Button.Content>
                                    <Button.IsEnabled>
                                        <MultiBinding Converter="{StaticResource BoolMultiConverter}" ConverterParameter="And">
                                            <Binding Path="VisibleRimDoors" Converter="{StaticResource IntGreaterEqualConverter}" ConverterParameter="1" />
                                            <Binding Path="GameDataWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                            <Binding Path="AddPolyWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                            <Binding Path="UpdateLayerVisibilityWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                            <Binding Path="RemovePolyWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                        </MultiBinding>
                                    </Button.IsEnabled>
                                </Button>
                            </StackPanel>

                            <ListView x:Name="lvRimDoor" Grid.Row="1"
                                      ItemContainerStyle="{StaticResource RimDataInfoItemStyle}"
                                      ItemsSource="{Binding RimDoors}"
                                      ScrollViewer.VerticalScrollBarVisibility="Visible"
                                      ScrollViewer.CanContentScroll="False">
                                <ListView.View>
                                    <GridView>
                                        <GridViewColumn Width="18" CellTemplate="{StaticResource dtRimDataInfo}">
                                            <GridViewColumn.Header>
                                                <GridViewColumnHeader Tag="Color" Content="" />
                                            </GridViewColumn.Header>
                                        </GridViewColumn>
                                        <GridViewColumn Width="80" DisplayMemberBinding="{Binding Module}">
                                            <GridViewColumn.Header>
                                                <GridViewColumnHeader Tag="Rim" Content="Rim" />
                                            </GridViewColumn.Header>
                                        </GridViewColumn>
                                        <GridViewColumn Width="130" DisplayMemberBinding="{Binding ResRef}">
                                            <GridViewColumn.Header>
                                                <GridViewColumnHeader Tag="ResRef" Content="Destination" />
                                            </GridViewColumn.Header>
                                        </GridViewColumn>
                                        <GridViewColumn Width="30" DisplayMemberBinding="{Binding Geometry.Count}">
                                            <GridViewColumn.Header>
                                                <GridViewColumnHeader Tag="V" Content="V" />
                                            </GridViewColumn.Header>
                                        </GridViewColumn>
                                    </GridView>
                                </ListView.View>
                            </ListView>
                        </Grid>

                        <!-- RIM Triggers -->
                        <Grid x:Name="rimTriggerGrid" Grid.Row="2" Margin="0">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>

                            <StackPanel Margin="0,5,0,2">
                                <CheckBox Style="{StaticResource cbRimDataAutoShow}"
                                          IsChecked="{Binding ShowTriggersOnAddRim, Mode=TwoWay}">
                                    <TextBlock>
                                        <Run>Triggers (</Run>
                                        <TextBlock Margin="-3,0" Text="{Binding RimTriggers.Count, FallbackValue=0, TargetNullValue=0}" />
                                        <Run>)</Run>
                                    </TextBlock>
                                </CheckBox>
                            </StackPanel>

                            <StackPanel HorizontalAlignment="Right">
                                <ToggleButton IsChecked="{Binding ShowRimDataTriggersDlzLines, Mode=TwoWay}" Tag="{Binding RimTriggers}" Style="{StaticResource btnRimDataDlz}">
                                    <ToggleButton.Content>
                                        <Image Width="15" Source="../Resources/Icons/DlzIcon.png" />
                                    </ToggleButton.Content>
                                </ToggleButton>
                                <Button Tag="{Binding RimTriggers}" Style="{StaticResource btnRimDataShow}">
                                    <Button.Content>
                                        <Image Width="15" Source="../Resources/Icons/ShowCurrentModuleIcon.png" />
                                    </Button.Content>
                                    <Button.IsEnabled>
                                        <MultiBinding Converter="{StaticResource BoolMultiConverter}" ConverterParameter="And">
                                            <Binding Path="RimTriggers.Count" Converter="{StaticResource IntGreaterEqualConverter}" ConverterParameter="1" />
                                            <Binding Path="HiddenRimTriggers" Converter="{StaticResource IntGreaterEqualConverter}" ConverterParameter="1" />
                                            <Binding Path="GameDataWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                            <Binding Path="AddPolyWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                            <Binding Path="UpdateLayerVisibilityWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                            <Binding Path="RemovePolyWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                        </MultiBinding>
                                    </Button.IsEnabled>
                                </Button>
                                <Button Tag="{Binding RimTriggers}" Style="{StaticResource btnRimDataHide}">
                                    <Button.Content>
                                        <Image Width="15" Source="../Resources/Icons/HidePreviousModuleIcon.png" />
                                    </Button.Content>
                                    <Button.IsEnabled>
                                        <MultiBinding Converter="{StaticResource BoolMultiConverter}" ConverterParameter="And">
                                            <Binding Path="VisibleRimTriggers" Converter="{StaticResource IntGreaterEqualConverter}" ConverterParameter="1" />
                                            <Binding Path="GameDataWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                            <Binding Path="AddPolyWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                            <Binding Path="UpdateLayerVisibilityWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                            <Binding Path="RemovePolyWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                        </MultiBinding>
                                    </Button.IsEnabled>
                                </Button>
                            </StackPanel>

                            <ListView x:Name="lvRimTrigger" Grid.Row="1"
                                      ItemContainerStyle="{StaticResource RimDataInfoItemStyle}"
                                      ItemsSource="{Binding RimTriggers}"
                                      ScrollViewer.VerticalScrollBarVisibility="Visible"
                                      ScrollViewer.CanContentScroll="False">
                                <ListView.View>
                                    <GridView>
                                        <GridViewColumn Width="18" CellTemplate="{StaticResource dtRimDataInfo}">
                                            <GridViewColumn.Header>
                                                <GridViewColumnHeader Tag="Color" Content="" />
                                            </GridViewColumn.Header>
                                        </GridViewColumn>
                                        <GridViewColumn Width="80" DisplayMemberBinding="{Binding Module}">
                                            <GridViewColumn.Header>
                                                <GridViewColumnHeader Tag="Rim" Content="Rim" />
                                            </GridViewColumn.Header>
                                        </GridViewColumn>
                                        <GridViewColumn Width="130" DisplayMemberBinding="{Binding ResRef}">
                                            <GridViewColumn.Header>
                                                <GridViewColumnHeader Tag="ResRef" Content="ResRef" />
                                            </GridViewColumn.Header>
                                        </GridViewColumn>
                                        <GridViewColumn Width="30" DisplayMemberBinding="{Binding Geometry.Count}">
                                            <GridViewColumn.Header>
                                                <GridViewColumnHeader Tag="V" Content="V" />
                                            </GridViewColumn.Header>
                                        </GridViewColumn>
                                    </GridView>
                                </ListView.View>
                            </ListView>
                        </Grid>

                        <!-- RIM Traps -->
                        <Grid x:Name="rimTrapGrid" Grid.Row="3" Margin="0">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>

                            <StackPanel Margin="0,5,0,2">
                                <CheckBox Style="{StaticResource cbRimDataAutoShow}"
                                          IsChecked="{Binding ShowTrapsOnAddRim, Mode=TwoWay}">
                                    <TextBlock>
                                        <Run>Traps (</Run>
                                        <TextBlock Margin="-3,0" Text="{Binding RimTraps.Count, FallbackValue=0, TargetNullValue=0}" />
                                        <Run>)</Run>
                                    </TextBlock>
                                </CheckBox>
                            </StackPanel>

                            <StackPanel HorizontalAlignment="Right">
                                <ToggleButton IsChecked="{Binding ShowRimDataTrapsDlzLines, Mode=TwoWay}" Tag="{Binding RimTraps}" Style="{StaticResource btnRimDataDlz}">
                                    <ToggleButton.Content>
                                        <Image Width="15" Source="../Resources/Icons/DlzIcon.png" />
                                    </ToggleButton.Content>
                                </ToggleButton>
                                <Button Tag="{Binding RimTraps}" Style="{StaticResource btnRimDataShow}">
                                    <Button.Content>
                                        <Image Width="15" Source="../Resources/Icons/ShowCurrentModuleIcon.png" />
                                    </Button.Content>
                                    <Button.IsEnabled>
                                        <MultiBinding Converter="{StaticResource BoolMultiConverter}" ConverterParameter="And">
                                            <Binding Path="RimTraps.Count" Converter="{StaticResource IntGreaterEqualConverter}" ConverterParameter="1" />
                                            <Binding Path="HiddenRimTraps" Converter="{StaticResource IntGreaterEqualConverter}" ConverterParameter="1" />
                                            <Binding Path="GameDataWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                            <Binding Path="AddPolyWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                            <Binding Path="UpdateLayerVisibilityWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                            <Binding Path="RemovePolyWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                        </MultiBinding>
                                    </Button.IsEnabled>
                                </Button>
                                <Button Tag="{Binding RimTraps}" Style="{StaticResource btnRimDataHide}">
                                    <Button.Content>
                                        <Image Width="15" Source="../Resources/Icons/HidePreviousModuleIcon.png" />
                                    </Button.Content>
                                    <Button.IsEnabled>
                                        <MultiBinding Converter="{StaticResource BoolMultiConverter}" ConverterParameter="And">
                                            <Binding Path="VisibleRimTraps" Converter="{StaticResource IntGreaterEqualConverter}" ConverterParameter="1" />
                                            <Binding Path="GameDataWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                            <Binding Path="AddPolyWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                            <Binding Path="UpdateLayerVisibilityWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                            <Binding Path="RemovePolyWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                        </MultiBinding>
                                    </Button.IsEnabled>
                                </Button>
                            </StackPanel>

                            <ListView x:Name="lvRimTrap" Grid.Row="1"
                                      ItemContainerStyle="{StaticResource RimDataInfoItemStyle}"
                                      ItemsSource="{Binding RimTraps}"
                                      ScrollViewer.VerticalScrollBarVisibility="Visible"
                                      ScrollViewer.CanContentScroll="False">
                                <ListView.View>
                                    <GridView>
                                        <GridViewColumn Width="18" CellTemplate="{StaticResource dtRimDataInfo}">
                                            <GridViewColumn.Header>
                                                <GridViewColumnHeader Tag="Color" Content="" />
                                            </GridViewColumn.Header>
                                        </GridViewColumn>
                                        <GridViewColumn Width="80" DisplayMemberBinding="{Binding Module}">
                                            <GridViewColumn.Header>
                                                <GridViewColumnHeader Tag="Rim" Content="Rim" />
                                            </GridViewColumn.Header>
                                        </GridViewColumn>
                                        <GridViewColumn Width="130" DisplayMemberBinding="{Binding ResRef}">
                                            <GridViewColumn.Header>
                                                <GridViewColumnHeader Tag="ResRef" Content="ResRef" />
                                            </GridViewColumn.Header>
                                        </GridViewColumn>
                                        <GridViewColumn Width="30" DisplayMemberBinding="{Binding Geometry.Count}">
                                            <GridViewColumn.Header>
                                                <GridViewColumnHeader Tag="V" Content="V" />
                                            </GridViewColumn.Header>
                                        </GridViewColumn>
                                    </GridView>
                                </ListView.View>
                            </ListView>
                        </Grid>

                        <!-- RIM Zones -->
                        <Grid x:Name="rimZoneGrid" Grid.Row="4" Margin="0">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>

                            <StackPanel Margin="0,5,0,2">
                                <CheckBox Style="{StaticResource cbRimDataAutoShow}"
                                          IsChecked="{Binding ShowZonesOnAddRim, Mode=TwoWay}">
                                    <TextBlock>
                                        <Run>Zones (</Run>
                                        <TextBlock Margin="-3,0" Text="{Binding RimZones.Count, FallbackValue=0, TargetNullValue=0}" />
                                        <Run>)</Run>
                                    </TextBlock>
                                </CheckBox>
                            </StackPanel>

                            <StackPanel HorizontalAlignment="Right">
                                <ToggleButton IsChecked="{Binding ShowRimDataZonesDlzLines, Mode=TwoWay}" Tag="{Binding RimZones}" Style="{StaticResource btnRimDataDlz}">
                                    <ToggleButton.Content>
                                        <Image Width="15" Source="../Resources/Icons/DlzIcon.png" />
                                    </ToggleButton.Content>
                                </ToggleButton>
                                <Button Tag="{Binding RimZones}" Style="{StaticResource btnRimDataShow}">
                                    <Button.Content>
                                        <Image Width="15" Source="../Resources/Icons/ShowCurrentModuleIcon.png" />
                                    </Button.Content>
                                    <Button.IsEnabled>
                                        <MultiBinding Converter="{StaticResource BoolMultiConverter}" ConverterParameter="And">
                                            <Binding Path="RimZones.Count" Converter="{StaticResource IntGreaterEqualConverter}" ConverterParameter="1" />
                                            <Binding Path="HiddenRimZones" Converter="{StaticResource IntGreaterEqualConverter}" ConverterParameter="1" />
                                            <Binding Path="GameDataWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                            <Binding Path="AddPolyWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                            <Binding Path="UpdateLayerVisibilityWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                            <Binding Path="RemovePolyWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                        </MultiBinding>
                                    </Button.IsEnabled>
                                </Button>
                                <Button Tag="{Binding RimZones}" Style="{StaticResource btnRimDataHide}">
                                    <Button.Content>
                                        <Image Width="15" Source="../Resources/Icons/HidePreviousModuleIcon.png" />
                                    </Button.Content>
                                    <Button.IsEnabled>
                                        <MultiBinding Converter="{StaticResource BoolMultiConverter}" ConverterParameter="And">
                                            <Binding Path="VisibleRimZones" Converter="{StaticResource IntGreaterEqualConverter}" ConverterParameter="1" />
                                            <Binding Path="GameDataWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                            <Binding Path="AddPolyWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                            <Binding Path="UpdateLayerVisibilityWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                            <Binding Path="RemovePolyWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                        </MultiBinding>
                                    </Button.IsEnabled>
                                </Button>
                            </StackPanel>

                            <ListView x:Name="lvRimZone" Grid.Row="1"
                                      ItemContainerStyle="{StaticResource RimDataInfoItemStyle}"
                                      ItemsSource="{Binding RimZones}"
                                      ScrollViewer.VerticalScrollBarVisibility="Visible"
                                      ScrollViewer.CanContentScroll="False">
                                <ListView.View>
                                    <GridView>
                                        <GridViewColumn Width="18" CellTemplate="{StaticResource dtRimDataInfo}">
                                            <GridViewColumn.Header>
                                                <GridViewColumnHeader Tag="Color" Content="" />
                                            </GridViewColumn.Header>
                                        </GridViewColumn>
                                        <GridViewColumn Width="80" DisplayMemberBinding="{Binding Module}">
                                            <GridViewColumn.Header>
                                                <GridViewColumnHeader Tag="Rim" Content="Rim" />
                                            </GridViewColumn.Header>
                                        </GridViewColumn>
                                        <GridViewColumn Width="130" DisplayMemberBinding="{Binding ResRef}">
                                            <GridViewColumn.Header>
                                                <GridViewColumnHeader Tag="ResRef" Content="ResRef" />
                                            </GridViewColumn.Header>
                                        </GridViewColumn>
                                        <GridViewColumn Width="30" DisplayMemberBinding="{Binding Geometry.Count}">
                                            <GridViewColumn.Header>
                                                <GridViewColumnHeader Tag="V" Content="V" />
                                            </GridViewColumn.Header>
                                        </GridViewColumn>
                                    </GridView>
                                </ListView.View>
                            </ListView>
                        </Grid>

                        <!-- RIM Encounters -->
                        <Grid x:Name="rimEncounterGrid" Grid.Row="5">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>

                            <StackPanel Margin="0,5,0,2">
                                <CheckBox Style="{StaticResource cbRimDataAutoShow}"
                                          IsChecked="{Binding ShowEncountersOnAddRim, Mode=TwoWay}">
                                    <TextBlock>
                                        <Run>Encounters (</Run>
                                        <TextBlock Margin="-3,0" Text="{Binding RimEncounters.Count, FallbackValue=0, TargetNullValue=0}" />
                                        <Run>)</Run>
                                    </TextBlock>
                                </CheckBox>
                            </StackPanel>

                            <StackPanel HorizontalAlignment="Right">
                                <ToggleButton IsChecked="{Binding ShowRimDataEncountersDlzLines, Mode=TwoWay}" Tag="{Binding RimEncounters}" Style="{StaticResource btnRimDataDlz}">
                                    <ToggleButton.Content>
                                        <Image Width="15" Source="../Resources/Icons/DlzIcon.png" />
                                    </ToggleButton.Content>
                                </ToggleButton>
                                <Button Tag="{Binding RimEncounters}" Style="{StaticResource btnRimDataShow}">
                                    <Button.Content>
                                        <Image Width="15" Source="../Resources/Icons/ShowCurrentModuleIcon.png" />
                                    </Button.Content>
                                    <Button.IsEnabled>
                                        <MultiBinding Converter="{StaticResource BoolMultiConverter}" ConverterParameter="And">
                                            <Binding Path="RimEncounters.Count" Converter="{StaticResource IntGreaterEqualConverter}" ConverterParameter="1" />
                                            <Binding Path="HiddenRimEncounters" Converter="{StaticResource IntGreaterEqualConverter}" ConverterParameter="1" />
                                            <Binding Path="GameDataWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                            <Binding Path="AddPolyWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                            <Binding Path="UpdateLayerVisibilityWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                            <Binding Path="RemovePolyWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                        </MultiBinding>
                                    </Button.IsEnabled>
                                </Button>
                                <Button Tag="{Binding RimEncounters}" Style="{StaticResource btnRimDataHide}">
                                    <Button.Content>
                                        <Image Width="15" Source="../Resources/Icons/HidePreviousModuleIcon.png" />
                                    </Button.Content>
                                    <Button.IsEnabled>
                                        <MultiBinding Converter="{StaticResource BoolMultiConverter}" ConverterParameter="And">
                                            <Binding Path="VisibleRimEncounters" Converter="{StaticResource IntGreaterEqualConverter}" ConverterParameter="1" />
                                            <Binding Path="GameDataWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                            <Binding Path="AddPolyWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                            <Binding Path="UpdateLayerVisibilityWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                            <Binding Path="RemovePolyWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                        </MultiBinding>
                                    </Button.IsEnabled>
                                </Button>
                            </StackPanel>

                            <ListView x:Name="lvRimEncounter" Grid.Row="1"
                                      ItemContainerStyle="{StaticResource RimDataInfoItemStyle}"
                                      ItemsSource="{Binding RimEncounters}"
                                      ScrollViewer.VerticalScrollBarVisibility="Visible"
                                      ScrollViewer.CanContentScroll="False">
                                <ListView.View>
                                    <GridView>
                                        <GridViewColumn Width="18" CellTemplate="{StaticResource dtRimDataInfo}">
                                            <GridViewColumn.Header>
                                                <GridViewColumnHeader Tag="Color" Content="" />
                                            </GridViewColumn.Header>
                                        </GridViewColumn>
                                        <GridViewColumn Width="80" DisplayMemberBinding="{Binding Module}">
                                            <GridViewColumn.Header>
                                                <GridViewColumnHeader Tag="Rim" Content="Rim" />
                                            </GridViewColumn.Header>
                                        </GridViewColumn>
                                        <GridViewColumn Width="130" DisplayMemberBinding="{Binding ResRef}">
                                            <GridViewColumn.Header>
                                                <GridViewColumnHeader Tag="ResRef" Content="ResRef" />
                                            </GridViewColumn.Header>
                                        </GridViewColumn>
                                        <GridViewColumn Width="30" DisplayMemberBinding="{Binding Geometry.Count}">
                                            <GridViewColumn.Header>
                                                <GridViewColumnHeader Tag="V" Content="V" />
                                            </GridViewColumn.Header>
                                        </GridViewColumn>
                                    </GridView>
                                </ListView.View>
                            </ListView>
                        </Grid>
                    </Grid>
                </Grid>

                <!--
                Left Panel: Distance Panel
                -->
                <Grid x:Name="distancePanel" Grid.Column="1"
                      Visibility="{Binding ShowDistancePanel,
                            Converter={StaticResource BoolToVisibilityConverter},
                            FallbackValue=Collapsed, TargetNullValue=Collapsed}">
                    <Grid Margin="4,0,0,0">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Grid.Resources>
                            <Style TargetType="Ellipse">
                                <Setter Property="Stroke" Value="Black" />
                                <Setter Property="Margin" Value="0,0,0,0" />
                                <Setter Property="Height" Value="8" />
                                <Setter Property="Width" Value="8" />
                            </Style>
                            
                            <Style TargetType="Button" x:Key="stylePathButton">
                                <Setter Property="VerticalAlignment" Value="Center" />
                                <Setter Property="FontSize" Value="10" />
                                <Setter Property="Padding" Value="2,-3,2,1" />
                                <Setter Property="Margin" Value="4,0,0,0" />
                                <Setter Property="Width" Value="13" />
                            </Style>
                            <Style TargetType="Button" x:Key="styleClearPathButton" BasedOn="{StaticResource stylePathButton}">
                                <Setter Property="Content" Value="X" />
                                <Setter Property="FontSize" Value="8" />
                                <Setter Property="Padding" Value="3,0" />
                                <Setter Property="Margin" Value="0,0,8,0" />
                                <Setter Property="ToolTip" Value="Clear and hide segments in this path." />
                                <EventSetter Event="Click" Handler="ClearPathButton_Click" />
                            </Style>
                            <Style TargetType="Button" x:Key="styleMinusPathButton" BasedOn="{StaticResource stylePathButton}">
                                <Setter Property="Content" Value="–" />
                                <Setter Property="ToolTip" Value="Remove the last segment added to this path." />
                                <EventSetter Event="Click" Handler="MinusPathButton_Click" />
                            </Style>
                            <Style TargetType="Button" x:Key="styleAddToPathButton" BasedOn="{StaticResource stylePathButton}">
                                <Setter Property="Content" Value="+" />
                                <Setter Property="ToolTip" Value="Add the current black segment to this path." />
                                <EventSetter Event="Click" Handler="AddToPathButton_Click" />
                            </Style>
                            <Style TargetType="Button" x:Key="stylePointButton" BasedOn="{StaticResource stylePathButton}">
                                <Setter Property="Height" Value="13" />
                                <Setter Property="Width" Value="22" />
                                <Setter Property="Margin" Value="4,0,0,0" />
                                <Setter Property="Padding" Value="0" />
                                <Setter Property="HorizontalContentAlignment" Value="Center" />
                                <Setter Property="VerticalContentAlignment" Value="Center" />
                                <Setter Property="ToolTip" Value="Create new segment from black and white points." />
                            </Style>
                            <Style TargetType="Button" x:Key="styleBlackPointButton" BasedOn="{StaticResource stylePointButton}">
                                <Setter Property="Width" Value="13" />
                                <Setter Property="ToolTip" Value="Create new segment from black and white points." />
                                <EventSetter Event="Click" Handler="AddBlackPointToPathButton_Click" />
                            </Style>
                            <Style TargetType="Button" x:Key="styleWhitePointButton" BasedOn="{StaticResource stylePointButton}">
                                <Setter Property="Width" Value="13" />
                                <Setter Property="ToolTip" Value="Create new segment from black and white points." />
                                <EventSetter Event="Click" Handler="AddWhitePointToPathButton_Click" />
                            </Style>

                            <Style TargetType="Line" x:Key="styleSegmentIcon">
                                <Setter Property="X1" Value="0" />
                                <Setter Property="Y1" Value="0" />
                                <Setter Property="X2" Value="14" />
                                <Setter Property="Y2" Value="0" />
                                <Setter Property="StrokeThickness" Value="3" />
                                <Setter Property="VerticalAlignment" Value="Center" />
                                <Setter Property="StrokeEndLineCap" Value="Round" />
                                <Setter Property="StrokeStartLineCap" Value="Round" />
                            </Style>
                        </Grid.Resources>

                        <!-- Distance speed options -->
                        <StackPanel HorizontalAlignment="Center" x:Name="distPanelSpeedButtons" Orientation="Horizontal" Margin="0,0,-3,0">
                            <StackPanel.Resources>
                                <Style TargetType="TextBlock">
                                    <Setter Property="Margin" Value="3,0" />
                                </Style>
                                <Style TargetType="ToggleButton" BasedOn="{StaticResource panelHorizontalToggleButton}">
                                    <Setter Property="FontSize" Value="12" />
                                    <EventSetter Event="Click" Handler="DistanceSpeedButton_Click" />
                                </Style>
                            </StackPanel.Resources>
                            <ToggleButton Tag="1.0" IsChecked="True">
                                <TextBlock Text="Run" />
                            </ToggleButton>
                            <ToggleButton Tag="1.2">
                                <TextBlock Text="Alacrity" />
                            </ToggleButton>
                            <ToggleButton Tag="1.3">
                                <TextBlock Text="Hyper Alacrity" />
                            </ToggleButton>
                            <ToggleButton Tag="1.5">
                                <TextBlock Text="Force Speed" />
                            </ToggleButton>
                        </StackPanel>

                        <!-- Coordinate Distances -->
                        <Border Grid.Row="1" Margin="0,4" Padding="4,2" BorderThickness="0,1" BorderBrush="#707070">
                            <StackPanel Orientation="Vertical" Margin="0">
                                <StackPanel.Resources>
                                    <Style TargetType="Ellipse">
                                        <Setter Property="Stroke" Value="Black" />
                                        <Setter Property="Margin" Value="0,0,0,0" />
                                        <Setter Property="Height" Value="12" />
                                        <Setter Property="Width" Value="12" />
                                    </Style>
                                    <Style TargetType="StackPanel">
                                        <Setter Property="Orientation" Value="Horizontal" />
                                        <Setter Property="Margin" Value="0,0,0,4" />
                                    </Style>
                                    <Style TargetType="Border">
                                        <Setter Property="BorderBrush" Value="Black" />
                                        <Setter Property="BorderThickness" Value="0,1,0,0" />
                                        <Setter Property="Padding" Value="0,1,0,0" />
                                        <Setter Property="Margin" Value="0,0,2,0" />
                                    </Style>
                                </StackPanel.Resources>

                                <!-- Title -->
                                <TextBlock HorizontalAlignment="Center" Text="Coordinate Distances" Margin="0,0,0,4" />

                                <!-- Distance from Left Point to Right Point -->
                                <StackPanel>
                                    <Border Margin="12,0,0,0">
                                        <StackPanel Orientation="Horizontal">
                                            <Ellipse Fill="Black" Margin="0,0,1,0" />
                                            <Ellipse Fill="White" />
                                        </StackPanel>
                                    </Border>
                                    <TextBlock TextAlignment="Right" Width="50"
                                           Text="{Binding DistanceLeftRight, StringFormat=N2, FallbackValue=1.11}" />
                                    <TextBlock Text="m," />
                                    <TextBlock TextAlignment="Right" Width="50"
                                           Text="{Binding DurationLeftRight, StringFormat=N2, FallbackValue=1.11}" />
                                    <TextBlock Text="s" />
                                </StackPanel>

                                <!-- Distance from Live to Left Point -->
                                <StackPanel>
                                    <Border Margin="12,0,0,0">
                                        <StackPanel Orientation="Horizontal">
                                            <Grid Margin="0,0,1,0">
                                                <Ellipse Stroke="Black" Fill="#4E6BDF" />
                                                <Polygon Points="6,6 0,10 6,0 12,10"
                                                     Stroke="Black" Fill="#42BFA4"
                                                     StrokeLineJoin="Round" StrokeThickness=".5" />
                                            </Grid>
                                            <Ellipse Fill="Black" />
                                        </StackPanel>
                                    </Border>
                                    <TextBlock TextAlignment="Right" Width="50"
                                           Text="{Binding DistanceLiveLeft, StringFormat=N2, FallbackValue=69.69}" />
                                    <TextBlock Text="m," />
                                    <TextBlock TextAlignment="Right" Width="50"
                                           Text="{Binding DurationLiveLeft, StringFormat=N2, FallbackValue=333.33}" />
                                    <TextBlock Text="s" />
                                </StackPanel>

                                <!-- Distance from Live to Right Point -->
                                <StackPanel>
                                    <Border Margin="12,0,0,0">
                                        <StackPanel Orientation="Horizontal">
                                            <Grid Margin="0,0,1,0">
                                                <Ellipse Stroke="Black" Fill="#4E6BDF" />
                                                <Polygon Points="6,6 0,10 6,0 12,10"
                                                     Stroke="Black" Fill="#42BFA4"
                                                     StrokeLineJoin="Round" StrokeThickness=".5" />
                                            </Grid>
                                            <Ellipse Fill="White" />
                                        </StackPanel>
                                    </Border>
                                    <TextBlock TextAlignment="Right" Width="50"
                                           Text="{Binding DistanceLiveRight, StringFormat=N2, FallbackValue=333.33}" />
                                    <TextBlock Text="m," />
                                    <TextBlock TextAlignment="Right" Width="50"
                                           Text="{Binding DurationLiveRight, StringFormat=N2, FallbackValue=333.33}" />
                                    <TextBlock Text="s" />
                                </StackPanel>
                            </StackPanel>
                        </Border>

                        <!-- Segment Settings -->
                        <Border Grid.Row="2" Margin="0,0,0,4" Padding="4,0,4,6" BorderThickness="0,0,0,1" BorderBrush="#707070">
                            <StackPanel>
                                <!-- Title -->
                                <TextBlock Grid.ColumnSpan="2" HorizontalAlignment="Center" Text="Segment Settings" Margin="0,0,0,4" />

                                <!-- Sticky Range -->
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                    </Grid.ColumnDefinitions>

                                    <CheckBox Grid.Row="1" Grid.Column="0" Content="Sticky Range:"
                                              IsChecked="{Binding SegmentIsSticky, Mode=TwoWay}"
                                              ToolTip="A newly drawn segment will stick to the start and end point of segments in paths within range." />
                                    <ComboBox Grid.Row="1" Grid.Column="1" Width="70" Height="18" Padding="0"
                                              HorizontalContentAlignment="Right" IsEnabled="{Binding SegmentIsSticky}"
                                              Text="{Binding SegmentStickyDistance, StringFormat=N1, Mode=TwoWay, FallbackValue=1.0}">
                                        <ComboBoxItem>0.0</ComboBoxItem>
                                        <ComboBoxItem>0.5</ComboBoxItem>
                                        <ComboBoxItem IsSelected="True">1.0</ComboBoxItem>
                                        <ComboBoxItem>1.5</ComboBoxItem>
                                        <ComboBoxItem>2.0</ComboBoxItem>
                                        <ComboBoxItem>2.5</ComboBoxItem>
                                        <ComboBoxItem>3.0</ComboBoxItem>
                                        <ComboBoxItem>3.5</ComboBoxItem>
                                        <ComboBoxItem>4.0</ComboBoxItem>
                                        <ComboBoxItem>4.5</ComboBoxItem>
                                        <ComboBoxItem>5.0</ComboBoxItem>
                                    </ComboBox>
                                </Grid>
                            </StackPanel>
                        </Border>

                        <!-- Segment Distance -->
                        <Border Grid.Row="3" Margin="0,0,0,4" Padding="4,0,4,6" BorderThickness="0,0,0,1" BorderBrush="#707070">
                            <StackPanel Orientation="Vertical">
                                <!-- Title -->
                                <TextBlock HorizontalAlignment="Center" Text="Segment Distance" Margin="0,0,0,4" />
                                
                                <!-- Length of the segment -->
                                <StackPanel Orientation="Horizontal" Margin="0">
                                    <Button Style="{StaticResource styleClearPathButton}" IsEnabled="{Binding TempSegmentVisible}" Tag="Black" />
                                    <Line Style="{StaticResource styleSegmentIcon}" Stroke="Black" />
                                    <TextBlock TextAlignment="Right" Width="50"
                                           Text="{Binding DistanceTempSegment, StringFormat=N2, FallbackValue=1.11}" />
                                    <TextBlock Text="m," />
                                    <TextBlock TextAlignment="Right" Width="50"
                                           Text="{Binding DurationTempSegment, StringFormat=N2, FallbackValue=333.33}" />
                                    <TextBlock Text="s" />
                                    <Button Style="{StaticResource stylePointButton}" Click="BuildSegmentFromBlackWhitePoints_Click">
                                        <Button.IsEnabled>
                                            <MultiBinding Converter="{StaticResource BoolMultiConverter}" ConverterParameter="And">
                                                <Binding Path="LeftClickPointVisible" />
                                                <Binding Path="RightClickPointVisible" />
                                            </MultiBinding>
                                        </Button.IsEnabled>
                                        <StackPanel Orientation="Horizontal">
                                            <Ellipse Fill="Black" Margin="0,0,1,0" />
                                            <Ellipse Fill="White" />
                                        </StackPanel>
                                    </Button>
                                </StackPanel>
                            </StackPanel>
                        </Border>
                        
                        <!-- Path Distances -->
                        <Border Grid.Row="4" Margin="0,0,0,4" Padding="4,0,4,6" BorderThickness="0,0,0,1" BorderBrush="#707070">
                            <StackPanel Orientation="Vertical">
                                <!-- Title -->
                                <TextBlock HorizontalAlignment="Center" Text="Path Distances" Margin="0,0,0,4" />

                                <!-- Length of blue path -->
                                <StackPanel Orientation="Horizontal" Margin="0">
                                    <Button Style="{StaticResource styleClearPathButton}" IsEnabled="{Binding BluePathVisible}" Tag="Blue" />
                                    <Line Style="{StaticResource styleSegmentIcon}" Stroke="Blue" />
                                    <TextBlock TextAlignment="Right" Width="50"
                                           Text="{Binding DistanceBluePath, StringFormat=N2, FallbackValue=1.11}" />
                                    <TextBlock Text="m," />
                                    <TextBlock TextAlignment="Right" Width="50"
                                           Text="{Binding DurationBluePath, StringFormat=N2, FallbackValue=1.11}" />
                                    <TextBlock Text="s" />
                                    <Button Style="{StaticResource styleMinusPathButton}" IsEnabled="{Binding BluePathVisible}" Tag="Blue" />
                                    <Button Style="{StaticResource styleAddToPathButton}" IsEnabled="{Binding TempSegmentVisible}" Tag="Blue" />
                                    <!--<Button ToolTip="Create new segment from black and white points."
                                            Style="{StaticResource styleBlackPointButton}">
                                        <Ellipse Fill="Black" />
                                    </Button>
                                    <Button ToolTip="Create new segment from black and white points."
                                            Style="{StaticResource styleWhitePointButton}">
                                        <Ellipse Fill="White" />
                                    </Button>-->
                                </StackPanel>
                                
                                <!-- Length of red path -->
                                <StackPanel Orientation="Horizontal" Margin="0">
                                    <Button Style="{StaticResource styleClearPathButton}" IsEnabled="{Binding RedPathVisible}" Tag="Red" />
                                    <Line Style="{StaticResource styleSegmentIcon}" Stroke="Red" />
                                    <TextBlock TextAlignment="Right" Width="50"
                                           Text="{Binding DistanceRedPath, StringFormat=N2, FallbackValue=22.22}" />
                                    <TextBlock Text="m," />
                                    <TextBlock TextAlignment="Right" Width="50"
                                           Text="{Binding DurationRedPath, StringFormat=N2, FallbackValue=22.22}" />
                                    <TextBlock Text="s" />
                                    <Button Style="{StaticResource styleMinusPathButton}" IsEnabled="{Binding RedPathVisible}" Tag="Red" />
                                    <Button Style="{StaticResource styleAddToPathButton}" IsEnabled="{Binding TempSegmentVisible}" Tag="Red" />
                                </StackPanel>
                                
                                <!-- Length of green path -->
                                <StackPanel Orientation="Horizontal" Margin="0">
                                    <Button Style="{StaticResource styleClearPathButton}" IsEnabled="{Binding GreenPathVisible}" Tag="Green" />
                                    <Line Style="{StaticResource styleSegmentIcon}" Stroke="Green" />
                                    <TextBlock TextAlignment="Right" Width="50"
                                           Text="{Binding DistanceGreenPath, StringFormat=N2, FallbackValue=333.33}" />
                                    <TextBlock Text="m," />
                                    <TextBlock TextAlignment="Right" Width="50"
                                           Text="{Binding DurationGreenPath, StringFormat=N2, FallbackValue=333.33}" />
                                    <TextBlock Text="s" />
                                    <Button Style="{StaticResource styleMinusPathButton}" IsEnabled="{Binding GreenPathVisible}" Tag="Green" />
                                    <Button Style="{StaticResource styleAddToPathButton}" IsEnabled="{Binding TempSegmentVisible}" Tag="Green" />
                                </StackPanel>
                            </StackPanel>
                        </Border>
                    </Grid>
                </Grid>

                <!--
                Left Panel: Live Tools Panel
                -->
                <ScrollViewer x:Name="toolsPanel" Grid.Column="1"
                              Margin="0,0,-4,0" Padding="0,0,4,0"
                              VerticalScrollBarVisibility="Auto"
                              Visibility="{Binding ShowToolsPanel,
                                  Converter={StaticResource BoolToVisibilityConverter},
                                  FallbackValue=Visible, TargetNullValue=Collapsed}">
                    <Grid>
                        <Grid.IsEnabled>
                            <MultiBinding Converter="{StaticResource BoolMultiConverter}" ConverterParameter="And">
                                <Binding Path="ShowLivePosition" />
                                <Binding Path="IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                            </MultiBinding>
                        </Grid.IsEnabled>
                        
                        <StackPanel Margin="4,2,0,0">
                            <StackPanel.Resources>
                                <Style TargetType="TextBlock" x:Key="tbHeader">
                                    <Setter Property="Margin" Value="0,0,0,6" />
                                    <Setter Property="TextAlignment" Value="Center" />
                                    <Setter Property="FontWeight" Value="Bold" />
                                </Style>
                                <Style TargetType="Button">
                                    <Setter Property="Margin" Value="0,0,0,4" />
                                    <Setter Property="Padding" Value="4,2" />
                                </Style>
                                <Style TargetType="Border">
                                    <Setter Property="BorderThickness" Value="0,0,0,1" />
                                    <Setter Property="BorderBrush" Value="#707070" />
                                    <Setter Property="Margin" Value="0,0,0,6" />
                                </Style>
                            </StackPanel.Resources>

                            <!--#region Momvement -->
                            <TextBlock Text="Movement" Style="{StaticResource tbHeader}" />
                            
                            <!-- Teleport Leader -->
                            <Grid Margin="0,0,0,6">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <TextBlock Grid.Column="0" Text="Teleport Leader To:" Margin="0,0,4,0" VerticalAlignment="Center" />
                                <!-- To Left Click Point -->
                                <Button Grid.Column="2" Click="TeleportPlayerToPoint_Click" Tag="{Binding LeftClickModuleCoords}" Margin="2,0"
                                        ToolTip="Teleport player to left double-click (black) point.">
                                    <Ellipse Width="12" Height="12" Fill="Black" Stroke="Black" StrokeThickness="1" />
                                </Button>
                                <!-- To Right Click Point -->
                                <Button Grid.Column="3" Click="TeleportPlayerToPoint_Click" Tag="{Binding RightClickModuleCoords}" Margin="2,0"
                                        ToolTip="Teleport player to right double-click (white) point.">
                                    <Ellipse Width="12" Height="12" Fill="White" Stroke="Black" StrokeThickness="1" />
                                </Button>
                                <!-- To Custom Coordinates -->
                                <Button Grid.Column="4" Content="Coordinates" Click="TeleportPlayerToPoint_Click" Tag="{Binding TeleportToCoordinates}"  Margin="2,0"
                                        ToolTip="Teleport player to custom coordinates.">
                                </Button>
                                <!-- Custom Coordinates -->
                                <Grid Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="5" Margin="50,2,4,0">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="4" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Grid.Column="0" Text="X: " />
                                    <TextBox   Grid.Column="1" Text="{Binding TeleportToCoordinates.X, StringFormat=N2, Mode=TwoWay, FallbackValue=0.0}" TextAlignment="Right" />
                                    <TextBlock Grid.Column="3" Text="Y: " />
                                    <TextBox   Grid.Column="4" Text="{Binding TeleportToCoordinates.Y, StringFormat=N2, Mode=TwoWay, FallbackValue=0.0}" TextAlignment="Right" />
                                </Grid>
                            </Grid>

                            <!-- Movement Speed -->
                            <Grid Margin="0,0,0,6">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <TextBlock Grid.Column="0" Margin="0,0,2,0"
                                           Text="Speed Multiplier:" VerticalAlignment="Center" />
                                <ComboBox Grid.Column="2" Width="110" Margin="4,0"
                                          HorizontalContentAlignment="Right"
                                          Text="{Binding MoveSpeedMultiplier, Mode=TwoWay}">
                                    <ComboBoxItem>0.5</ComboBoxItem>
                                    <ComboBoxItem IsSelected="True">1.0</ComboBoxItem>
                                    <ComboBoxItem>2.0</ComboBoxItem>
                                    <ComboBoxItem>5.0</ComboBoxItem>
                                    <ComboBoxItem>10.0</ComboBoxItem>
                                </ComboBox>
                                <Button Grid.Column="3" Width="22" Height="22" Margin="0" Padding="0,0" Click="SetMoveSpeedMultiplier_Click"
                                        ToolTip="Multiply the default movement speed by the selected value.">
                                    <Image Width="18" Height="18" Source="/Resources/Icons/LivePositionIcon.png" />
                                </Button>
                            </Grid>

                            <!-- Warp to Module -->
                            <Grid Margin="0,0,0,6">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <TextBlock Grid.Column="0" Margin="0,0,2,2"
                                           Text="Warp To Module:" VerticalAlignment="Center" />
                                <ComboBox Grid.Column="2" Margin="4,0" Width="110" Name="cbbWarpToRim" ItemsSource="{Binding AllRimNames}" />
                                <Button Grid.Column="3" Width="22" Height="22" Margin="0" Padding="0,0" Click="WarpCheat_Click"
                                        ToolTip="Load the selected module using the warp cheat.">
                                    <Image Width="18" Height="18" Source="/Resources/Icons/LivePositionIcon.png" />
                                </Button>
                            </Grid>
                            
                            <Border />
                            <!--#endregion-->

                            <!--#region Party Members -->
                            <TextBlock Text="Party Members" Style="{StaticResource tbHeader}" />
                            <Button Content="Heal Leader" Click="HealLeaderCheat_Click"
                                    ToolTip="Run the cheat to heal the party leader." />
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="4" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <Button Grid.Column="0" Content="GP Dialog" Tag="Dialog"
                                        Click="StartGatherPartyDialog_Click"
                                        ToolTip="Pop up the gather / revive party dialog."
                                        />
                                <Button Grid.Column="2" Content="GP Warp" Tag="Warp"
                                        Click="StartGatherPartyDialog_Click"
                                        ToolTip="Run the script that warps the leader to a gather / revive party point."
                                        />
                            </Grid>
                            <Button Content="Unlock Full Party"
                                    Click="UnlockFullParty_Click"
                                    ToolTip="Unlock all standard party members."
                                    />
                            <Button Content="Swap to Target Creature"
                                    Click="SwapToTargetCreature_Click"
                                    ToolTip="Set target creature as party leader."
                                    />
                            <Border Margin="0,2,0,6" />
                            <!--#endregion-->
                            
                            <!--#region Abilities -->
                            <Grid>
                                <TextBlock Text="Abilities" Style="{StaticResource tbHeader}" />
                                <Button HorizontalAlignment="Right" Content="Max" Margin="0,-2,26,0" FontSize="10" VerticalAlignment="Top" Width="32" Padding="0,1" Height="18"
                                        VerticalContentAlignment="Center" Click="MaximumAbilities_Click" ToolTip="Assign maximum values to the ability functions." />
                                <Button Visibility="Collapsed" Grid.Column="3" Width="22" Height="18" Margin="0,-2,0,0" Padding="0,0" HorizontalAlignment="Right" VerticalAlignment="Top"
                                        Click="AllAbilities_Click" ToolTip="Run all three functions: attribute, skill, and feat.">
                                    <Image Width="14" Height="14" Source="/Resources/Icons/LivePositionIcon.png" />
                                </Button>
                            </Grid>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="36" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Grid.Resources>
                                    <ControlTemplate x:Key="TextBoxErrorTemplate">
                                        <StackPanel>
                                            <AdornedElementPlaceholder x:Name="Holder" />
                                            <Label Foreground="Red" Content="{Binding ElementName=Holder,
                                                   Path=AdornedElement.(Validation.Errors)[0].ErrorContent}" />
                                        </StackPanel>
                                    </ControlTemplate>
                                    <Style TargetType="TextBlock">
                                        <Setter Property="VerticalAlignment" Value="Center" />
                                        <Setter Property="Margin" Value="0,0,0,6" />
                                    </Style>
                                    <Style TargetType="TextBox">
                                        <Setter Property="TextAlignment" Value="Right" />
                                        <Setter Property="VerticalContentAlignment" Value="Center" />
                                        <Setter Property="Margin" Value="4,0,0,6" />
                                    </Style>
                                    <Style TargetType="ComboBox">
                                        <Setter Property="Margin" Value="4,0,0,6" />
                                    </Style>
                                    <Style TargetType="Button">
                                        <Setter Property="Margin" Value="4,0,0,0" />
                                        <Setter Property="Padding" Value="0" />
                                        <Setter Property="Margin" Value="4,0,0,6" />
                                        <Setter Property="Height" Value="22" />
                                        <Setter Property="Width" Value="22" />
                                    </Style>
                                    <Style TargetType="Image">
                                        <Setter Property="Height" Value="18" />
                                        <Setter Property="Width" Value="18" />
                                    </Style>
                                </Grid.Resources>

                                <!-- Add Class -->
                                <TextBlock Grid.Row="0" Grid.Column="0" Text="Add Class:" />
                                <ComboBox Grid.Row="0" Grid.Column="1" Name="cbClass" Grid.ColumnSpan="2" ItemsSource="{Binding KotorClasses}" />
                                <Button Grid.Row="0" Grid.Column="3" Click="AddClass_Click" ToolTip="Add the selected class to the leader.">
                                    <Image Source="/Resources/Icons/LivePositionIcon.png" />
                                </Button>

                                <!-- Level Up -->
                                <TextBlock Grid.Row="1" Grid.Column="0" Text="Add XP:" />
                                <TextBox Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2" Name="tbExperienceValue"
                                         PreviewTextInput="tbPreviewIntegerInput" PreviewKeyDown="tbPreviewIntegerKeyDown">
                                    <TextBox.Text>
                                        <Binding Path="ValueInExperienceBox" UpdateSourceTrigger="PropertyChanged">
                                            <Binding.ValidationRules>
                                                <help:IntRangeRule Min="0" />
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                                <Button Grid.Row="1" Grid.Column="3" Click="AddExperience_Click" ToolTip="Set the leader's skill value from -127 to 127."
                                        IsEnabled="{Binding ElementName=tbExperienceValue, Path=(Validation.HasError), Converter={StaticResource InverseBooleanConverter}}">
                                    <Image Source="/Resources/Icons/LivePositionIcon.png" />
                                </Button>

                                <!-- Set Attributes -->
                                <TextBlock Grid.Row="2" Grid.Column="0" Text="Set Attribute:" />
                                <ComboBox Grid.Row="2" Grid.Column="1" Name="cbAttribute" ItemsSource="{Binding KotorAttributes}" />
                                <TextBox Grid.Row="2" Grid.Column="2" Name="tbAttributeValue"
                                         PreviewTextInput="tbPreviewIntegerInput" PreviewKeyDown="tbPreviewIntegerKeyDown">
                                    <TextBox.Text>
                                        <Binding Path="ValueInAttributeBox" UpdateSourceTrigger="PropertyChanged">
                                            <Binding.ValidationRules>
                                                <help:IntRangeRule Min="0" Max="255" />
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                                <Button Grid.Row="2" Grid.Column="3" Click="SetAttribute_Click" ToolTip="Set the leader's attribute value from 0 to 255."
                                        IsEnabled="{Binding ElementName=tbAttributeValue, Path=(Validation.HasError), Converter={StaticResource InverseBooleanConverter}}">
                                    <Image Source="/Resources/Icons/LivePositionIcon.png" />
                                </Button>
                                
                                <!-- Set Skills -->
                                <TextBlock Grid.Row="3" Grid.Column="0" Text="Set Skill:" />
                                <ComboBox Grid.Row="3" Grid.Column="1" Name="cbSkill" ItemsSource="{Binding KotorSkills}" />
                                <TextBox Grid.Row="3" Grid.Column="2" Name="tbSkillValue"
                                         PreviewTextInput="tbPreviewIntegerInput" PreviewKeyDown="tbPreviewIntegerKeyDown">
                                    <TextBox.Text>
                                        <Binding Path="ValueInSkillBox" UpdateSourceTrigger="PropertyChanged">
                                            <Binding.ValidationRules>
                                                <help:IntRangeRule Min="-128" Max="127" />
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                                <Button Grid.Row="3" Grid.Column="3" Click="SetSkill_Click" ToolTip="Set the leader's skill value from -127 to 127."
                                        IsEnabled="{Binding ElementName=tbSkillValue, Path=(Validation.HasError), Converter={StaticResource InverseBooleanConverter}}">
                                    <Image Source="/Resources/Icons/LivePositionIcon.png" />
                                </Button>

                                <!-- Add Feats -->
                                <TextBlock Grid.Row="4" Grid.Column="0" Text="Add Feat:" />
                                <ComboBox Grid.Row="4" Grid.Column="1" Name="cbFeat" Grid.ColumnSpan="2" ItemsSource="{Binding KotorFeats}" />
                                <Button Grid.Row="4" Grid.Column="3" Click="AddFeat_Click" ToolTip="Add the selected feat to the leader.">
                                    <Image Source="/Resources/Icons/LivePositionIcon.png" />
                                </Button>

                                <!-- Add Powers -->
                                <!--<TextBlock Grid.Row="5" Grid.Column="0" Text="Add Power:" />
                                <ComboBox Grid.Row="5" Grid.Column="1" Name="cbPower" Grid.ColumnSpan="2" ItemsSource="{Binding KotorPowers}" />
                                <Button Grid.Row="5" Grid.Column="3" Click="AddPower_Click" ToolTip="Add the selected force power to the leader.">
                                    <Image Source="/Resources/Icons/LivePositionIcon.png" />
                                </Button>-->
                            </Grid>
                            
                            <Border />
                            <!--#endregion-->
                            
                            <!--#region Inventory -->
                            <TextBlock Text="Inventory" Style="{StaticResource tbHeader}" />
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="36" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Grid.Resources>
                                    <ControlTemplate x:Key="TextBoxErrorTemplate">
                                        <StackPanel>
                                            <AdornedElementPlaceholder x:Name="Holder" />
                                            <Label Foreground="Red" Content="{Binding ElementName=Holder,
                                                   Path=AdornedElement.(Validation.Errors)[0].ErrorContent}" />
                                        </StackPanel>
                                    </ControlTemplate>
                                    <Style TargetType="TextBlock">
                                        <Setter Property="VerticalAlignment" Value="Center" />
                                        <Setter Property="Margin" Value="0,0,0,6" />
                                    </Style>
                                    <Style TargetType="TextBox">
                                        <Setter Property="TextAlignment" Value="Right" />
                                        <Setter Property="VerticalContentAlignment" Value="Center" />
                                        <Setter Property="Margin" Value="4,0,0,6" />
                                    </Style>
                                    <Style TargetType="ComboBox">
                                        <Setter Property="Margin" Value="4,0,0,6" />
                                    </Style>
                                    <Style TargetType="Button">
                                        <Setter Property="Margin" Value="4,0,0,0" />
                                        <Setter Property="Padding" Value="0" />
                                        <Setter Property="Margin" Value="4,0,0,6" />
                                        <Setter Property="Height" Value="22" />
                                        <Setter Property="Width" Value="22" />
                                    </Style>
                                    <Style TargetType="Image">
                                        <Setter Property="Height" Value="18" />
                                        <Setter Property="Width" Value="18" />
                                    </Style>
                                </Grid.Resources>

                                <!-- Set Credits -->
                                <TextBlock Grid.Row="0" Grid.Column="0" Text="Set Credits:" />
                                <TextBox Grid.Row="0" Grid.Column="1" Grid.ColumnSpan="2" Name="tbSetCreditsValue"
                                         PreviewTextInput="tbPreviewIntegerInput" PreviewKeyDown="tbPreviewIntegerKeyDown">
                                    <TextBox.Text>
                                        <Binding Path="ValueInSetCreditsBox" UpdateSourceTrigger="PropertyChanged">
                                            <Binding.ValidationRules>
                                                <help:IntRangeRule Max="999999999" />
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                                <Button Grid.Row="0" Grid.Column="3" Click="SetCredits_Click" ToolTip="Set the amount of credits in the party's inventory."
                                        IsEnabled="{Binding ElementName=tbSetCreditsValue, Path=(Validation.HasError), Converter={StaticResource InverseBooleanConverter}}">
                                    <Image Source="/Resources/Icons/LivePositionIcon.png" />
                                </Button>

                                <!-- Filter Items -->
                                <!--<TextBlock Grid.Row="1" Grid.Column="0" Text="Item Filter:" />
                                <ComboBox Grid.Row="1" Grid.Column="1" Name="cbItemFilter" Grid.ColumnSpan="2" ItemsSource="{Binding KotorFeats}" />-->
                                
                                <!-- Give Items -->
                                <!--<TextBlock Grid.Row="2" Grid.Column="0" Text="Give Item:" />
                                <ComboBox Grid.Row="2" Grid.Column="1" Name="cbItem" Grid.ColumnSpan="2" ItemsSource="{Binding KotorFeats}" />
                                <Button Grid.Row="2" Grid.Column="3" Click="GiveItem_Click" ToolTip="Set the amount of credits in the party's inventory."
                                        IsEnabled="{Binding ElementName=tbSetCreditsValue, Path=(Validation.HasError), Converter={StaticResource InverseBooleanConverter}}">
                                    <Image Source="/Resources/Icons/LivePositionIcon.png" />
                                </Button>-->
                            </Grid>
                            <Border />
                            <!--#endregion-->

                            <!--#region FreeCam -->
                            <TextBlock Text="FreeCam Mode" Style="{StaticResource tbHeader}" />
                            <Grid Margin="0,0,0,2">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="4" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <Button Grid.Column="0" Content="Turn On" Click="TurnOnFreeCam_Click" />
                                <Button Grid.Column="2" Content="Turn Off" Click="TurnOffFreeCam_Click" />
                            </Grid>
                            <!--<Border />-->
                            <!--#endregion-->

                            <!-- TODO: Consider adding Set Attribute or Set Skill cheats.
                                Invulnerability - Can we determine if this is currently active?
                                Set Attributes To 99
                                Set Skills To 99
                                Set [Attribute](CB) to [Value](TB)
                                Set [Skill](CB) to [Value](TB)
                            -->

                            <!--#region Affect Target (Disabled) -->
                            <!--<TextBlock Text="Affect Target" Style="{StaticResource tbHeader}" />
                            <Button Content="Delete Door"
                                    Click="DeleteTargetDoor_Click"
                                    />
                            <Button Content="Kill Creature"
                                    Click="KillTargetCreature_Click"
                                    />
                            <Button Content="Peek Container"
                                    Click="PeekTargetContainer_Click"
                                    />
                            <Border />-->
                            <!--#endregion-->

                            <!--#region Models (Disabled) -->
                            <!--<TextBlock Text="Add Models" Style="{StaticResource tbHeader}" />

                            <ComboBox Margin="0,4" Padding="6,3,5,3">
                                <ComboBoxItem IsSelected="True">Note</ComboBoxItem>
                            </ComboBox>

                            <Border />

                            <TextBlock Text="Edit Models" Style="{StaticResource tbHeader}" />

                            <ComboBox Margin="0,4" Padding="6,3,5,3">
                                <ComboBoxItem IsSelected="True">Note 1</ComboBoxItem>
                                <ComboBoxItem>Note 2</ComboBoxItem>
                                <ComboBoxItem></ComboBoxItem>
                            </ComboBox>

                            <Button Content="Add Target to List" />

                            <Border />-->
                            <!--#endregion-->
                        </StackPanel>
                    </Grid>
                </ScrollViewer>
                
                <!--
                Left Panel Grid Splitter
                -->
                <GridSplitter x:Name="gsLeftPanel" Grid.Column="2" Width="3" Background="#FF707070"
                              HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="4,0,0,0"
                              IsVisibleChanged="gsLeftPanel_IsVisibleChanged">
                    <GridSplitter.Visibility>
                        <MultiBinding Converter="{StaticResource BoolToVisibilityMultiConverter}" ConverterParameter="Or"
                                      FallbackValue="Collapsed" TargetNullValue="Collapsed">
                            <Binding Path="ShowCoordinatePanel" />
                            <Binding Path="ShowRimDataPanel" />
                            <Binding Path="ShowDistancePanel" />
                            <Binding Path="ShowToolsPanel" />
                        </MultiBinding>
                    </GridSplitter.Visibility>
                </GridSplitter>

                <!--
                Walkmesh Canvas    
                -->
                <ScrollViewer
                    x:Name="scroller"
                    Grid.Column="3"
                    CanContentScroll="True"
                    VerticalScrollBarVisibility="Visible"
                    HorizontalScrollBarVisibility="Visible"
                    >

                    <!-- This is the control that handles zooming and panning. -->
                    <ZoomAndPan:ZoomAndPanControl
                        x:Name="zoomAndPanControl"
                        Background="LightGray"
                        MouseDown="zoomAndPanControl_MouseDown"
                        MouseUp="zoomAndPanControl_MouseUp"
                        MouseMove="zoomAndPanControl_MouseMove"
                        MouseWheel="zoomAndPanControl_MouseWheel"
                        MouseDoubleClick="zoomAndPanControl_MouseDoubleClick"
                        ContentScale="3"
                        MinContentScale=".1"
                        MaxContentScale="50"
                        >

                        <!-- This is the content that is displayed. -->
                        <Grid x:Name="theGrid" Width="250" Height="200">
                            <!-- This Canvas is the main part of the content that is displayed. -->
                            <Canvas x:Name="content" Background="White">
                                <Canvas.Resources>
                                    <!--<help:ThresholdEffect x:Key="shader"
                                        Threshold=".25"
                                        BlankColor="Blue"
                                        />-->

                                    <TransformGroup x:Key="CartesianTransform">
                                        <TranslateTransform Y="{Binding BottomOffset}" X="{Binding LeftOffset}"/>
                                        <ScaleTransform ScaleY="-1" />
                                        <TranslateTransform Y="{Binding ElementName=theGrid, Path=Height}" />
                                    </TransformGroup>

                                    <TransformGroup x:Key="OffsetTransform">
                                        <TranslateTransform X="{Binding LeftOffset}" Y="{Binding BottomOffset}" />
                                        <TranslateTransform Y="{Binding ElementName=theGrid, Path=Height}" />
                                    </TransformGroup>

                                    <TranslateTransform x:Key="CoordOffsetTransform" X="2" Y="1.5" />

                                    <Style TargetType="Ellipse" x:Key="CoordPoint">
                                        <Setter Property="Width" Value="1" />
                                        <Setter Property="Height" Value="1" />
                                        <Setter Property="StrokeThickness" Value=".1" />
                                    </Style>

                                    <Style TargetType="Polygon">
                                        <Setter Property="RenderTransform" Value="{StaticResource CartesianTransform}" />
                                    </Style>

                                    <Style TargetType="StackPanel">
                                        <Setter Property="Margin" Value="0" />
                                        <Setter Property="Orientation" Value="Horizontal" />
                                        <Setter Property="RenderTransform" Value="{StaticResource CoordOffsetTransform}" />
                                    </Style>

                                    <Style TargetType="TextBlock">
                                        <Setter Property="FontSize" Value="4" />
                                        <Setter Property="Foreground" Value="{Binding CoordinateTextBrush}" />
                                    </Style>

                                    <Style TargetType="Path">
                                        <Setter Property="StrokeThickness" Value=".35" />
                                        <Setter Property="StrokeStartLineCap" Value="Round" />
                                        <Setter Property="StrokeEndLineCap" Value="Round" />
                                        <!--<Setter Property="StrokeLineJoin" Value="" />-->
                                    </Style>

                                    <Style TargetType="Line" x:Key="baseLine">
                                        <Setter Property="StrokeThickness" Value=".35" />
                                        <Setter Property="StrokeEndLineCap" Value="Round" />
                                        <Setter Property="StrokeStartLineCap" Value="Round" />
                                    </Style>
                                </Canvas.Resources>

                                <!--
                                This Ellipse and StackPanel act as the point and text field for users to check map coordinates.
                                To maintain these data bindings, they will be saved in case the canvas is cleared.
                                If a module is added or removed, both will be hidden using the PointClicked boolean.
                                -->
                                <Ellipse
                                    x:Name="leftClickEllipse" Fill="Black" Stroke="White"
                                    Visibility="{Binding LeftClickPointVisible, Converter={StaticResource BoolToVisibilityConverter}}"
                                    Canvas.Left="{Binding LeftClickPoint.X}"
                                    Canvas.Bottom="{Binding LeftClickPoint.Y}"
                                    Style="{StaticResource CoordPoint}"
                                    />
                                <Border x:Name="leftClickCoords"
                                        Visibility="{Binding LeftClickPointVisible, Converter={StaticResource BoolToVisibilityConverter}}"
                                        Canvas.Left="{Binding LeftClickPoint.X}" Canvas.Bottom="{Binding LeftClickPoint.Y}">
                                    <StackPanel Visibility="{Binding ShowLeftClickPointCoordinates, Converter={StaticResource BoolToVisibilityConverter}}">
                                        <TextBlock Text="(" />
                                        <TextBlock Text="{Binding LeftClickModuleCoords.X, StringFormat=N2}" />
                                        <TextBlock Text=", " />
                                        <TextBlock Text="{Binding LeftClickModuleCoords.Y, StringFormat=N2}" />
                                        <TextBlock Text=")" />
                                    </StackPanel>
                                </Border>
                                <Grid x:Name="leftClickGatherPartyRange" Margin="0"
                                      Canvas.Left="{Binding LeftClickPoint.X}"
                                      Canvas.Bottom="{Binding LeftClickPoint.Y}"
                                      Visibility="{Binding LeftClickPointVisible, Converter={StaticResource BoolToVisibilityConverter}}">
                                    <Ellipse Stroke="{Binding LeftClickGatherPartyRangeStrokeBrush}"
                                             Fill="{Binding LeftClickGatherPartyRangeFillBrush}"
                                             StrokeThickness=".1" Width="60" Height="60"
                                             Visibility="{Binding ShowLeftClickGatherPartyRange, Converter={StaticResource BoolToVisibilityConverter}}">
                                        <Ellipse.RenderTransform>
                                            <TranslateTransform X="-29.5" Y="29.5" />
                                        </Ellipse.RenderTransform>
                                    </Ellipse>
                                </Grid>

                                <Ellipse
                                    x:Name="rightClickEllipse" Fill="White" Stroke="Black"
                                    Visibility="{Binding RightClickPointVisible, Converter={StaticResource BoolToVisibilityConverter}}"
                                    Canvas.Left="{Binding RightClickPoint.X}"
                                    Canvas.Bottom="{Binding RightClickPoint.Y}"
                                    Style="{StaticResource CoordPoint}"
                                    />
                                <Border
                                    x:Name="rightClickCoords"
                                    Visibility="{Binding RightClickPointVisible, Converter={StaticResource BoolToVisibilityConverter}}"
                                    Canvas.Left="{Binding RightClickPoint.X}"
                                    Canvas.Bottom="{Binding RightClickPoint.Y}"
                                    >
                                    <StackPanel Visibility="{Binding ShowRightClickPointCoordinates, Converter={StaticResource BoolToVisibilityConverter}}">
                                        <TextBlock Text="(" />
                                        <TextBlock Text="{Binding RightClickModuleCoords.X, StringFormat=N2}" />
                                        <TextBlock Text=", " />
                                        <TextBlock Text="{Binding RightClickModuleCoords.Y, StringFormat=N2}" />
                                        <TextBlock Text=")" />
                                    </StackPanel>
                                </Border>

                                <!--Points="0.5,0.25 0,0 0.5,1 1,0 0.5,0.25"-->
                                <!--Points="0,0 -0.5,-0.25 0,0.5 0.5,-0.25"-->
                                <!--Points="0,0 -1,-0.5 0,1 1,-0.5"-->

                                <!-- Leader Icon -->
                                <Grid x:Name="livePositionArrow" Margin="0"
                                      Canvas.Left="{Binding LivePositionEllipsePoint.X}"
                                      Canvas.Bottom="{Binding LivePositionEllipsePoint.Y}"
                                      Visibility="{Binding ShowLivePosition, Converter={StaticResource BoolToVisibilityConverter}}">
                                    <Ellipse Stroke="Black" Fill="#4E6BDF"
                                             Style="{StaticResource CoordPoint}" />
                                    <Polygon Points="0,0 -0.5,-0.25 0,0.5 0.5,-0.25"
                                             Stroke="Black" Fill="#42BFA4"
                                             StrokeLineJoin="Round" StrokeThickness=".1">
                                        <Polygon.RenderTransform>
                                            <TransformGroup>
                                                <RotateTransform Angle="{Binding LiveLeaderBearing}" />
                                                <TranslateTransform X=".5" Y="-.5" />
                                                <ScaleTransform ScaleY="-1"/>
                                            </TransformGroup>
                                        </Polygon.RenderTransform>
                                    </Polygon>
                                </Grid>
                                <Grid Name="lastGatherPartyRangePosition" Margin="0"
                                      Canvas.Left="{Binding LastGatherPartyRangePoint.X}"
                                      Canvas.Bottom="{Binding LastGatherPartyRangePoint.Y}"
                                      Visibility="{Binding ShowLivePosition, Converter={StaticResource BoolToVisibilityConverter}}">
                                    <Ellipse Fill="{Binding LiveGatherPartyRangeStrokeBrush}"
                                             Stroke="Goldenrod" StrokeThickness=".1"
                                             Width="1" Height="1">
                                        <Ellipse.Visibility>
                                            <MultiBinding Converter="{StaticResource BoolToVisibilityMultiConverter}" ConverterParameter="And">
                                                <Binding Path="ShowGatherPartyRange" />
                                                <Binding Path="LockGatherPartyRange" />
                                            </MultiBinding>
                                        </Ellipse.Visibility>
                                    </Ellipse>
                                </Grid>
                                <Grid x:Name="liveGatherPartyRange" Margin="0"
                                      Canvas.Left="{Binding LiveGatherPartyRangePoint.X}"
                                      Canvas.Bottom="{Binding LiveGatherPartyRangePoint.Y}"
                                      Visibility="{Binding ShowLivePosition, Converter={StaticResource BoolToVisibilityConverter}}">
                                    <Ellipse Stroke="{Binding LiveGatherPartyRangeStrokeBrush}"
                                             Fill="{Binding LiveGatherPartyRangeFillBrush}"
                                             StrokeThickness=".1" Width="60" Height="60"
                                             Visibility="{Binding ShowGatherPartyRange, Converter={StaticResource BoolToVisibilityConverter}}">
                                        <Ellipse.RenderTransform>
                                            <TranslateTransform X="-29.5" Y="29.5" />
                                        </Ellipse.RenderTransform>
                                    </Ellipse>
                                </Grid>

                                <!--Octagon for correct player shape-->
                                <!--<Polygon Points="-2.4142,-1  -1,-2.4142  1,-2.4142  2.4142,-1  2.4142,1  1,2.4142  -1,2.4142  -2.4142,1"
                                         Stroke="Black" Fill="#42BFA4" StrokeThickness=".4">
                                    <Polygon.RenderTransform>
                                        <TransformGroup>
                                            <RotateTransform Angle="22.5" />
                                            <TranslateTransform X="5" Y="15" />
                                            <ScaleTransform ScaleX="0.2071" ScaleY="0.2071" />
                                        </TransformGroup>
                                    </Polygon.RenderTransform>
                                </Polygon>-->

                                <!-- Party Member 1 Icon -->
                                <Grid x:Name="livePositionArrowPC1" Margin="0"
                                      Canvas.Left="{Binding LivePositionEllipsePointPC1.X}"
                                      Canvas.Bottom="{Binding LivePositionEllipsePointPC1.Y}"
                                      Visibility="{Binding ShowLivePosition, Converter={StaticResource BoolToVisibilityConverter}}">
                                    <Grid>
                                        <Grid.Visibility>
                                            <MultiBinding Converter="{StaticResource BoolToVisibilityMultiConverter}" ConverterParameter="Or">
                                                <Binding Path="LivePartyCount" Converter="{StaticResource UintGreaterEqualConverter}" ConverterParameter="2" />
                                            </MultiBinding>
                                        </Grid.Visibility>
                                        <Ellipse Stroke="Black" Fill="#FA7300" Style="{StaticResource CoordPoint}" />
                                        <Polygon Points="0,0 -0.5,-0.25 0,0.5 0.5,-0.25"
                                             Stroke="Black" Fill="#4E6BDF"
                                             StrokeLineJoin="Round" StrokeThickness=".1">
                                            <Polygon.RenderTransform>
                                                <TransformGroup>
                                                    <RotateTransform Angle="{Binding LiveBearingPC1}" />
                                                    <TranslateTransform X=".5" Y="-.5" />
                                                    <ScaleTransform ScaleY="-1"/>
                                                </TransformGroup>
                                            </Polygon.RenderTransform>
                                        </Polygon>
                                    </Grid>
                                </Grid>

                                <!-- Party Member 2 Icon -->
                                <Grid x:Name="livePositionArrowPC2" Margin="0"
                                      Canvas.Left="{Binding LivePositionEllipsePointPC2.X}"
                                      Canvas.Bottom="{Binding LivePositionEllipsePointPC2.Y}"
                                      Visibility="{Binding ShowLivePosition, Converter={StaticResource BoolToVisibilityConverter}}">
                                    <Grid Margin="0">
                                        <Grid.Visibility>
                                            <MultiBinding Converter="{StaticResource BoolToVisibilityMultiConverter}" ConverterParameter="Or">
                                                <Binding Path="LivePartyCount" Converter="{StaticResource UintGreaterEqualConverter}" ConverterParameter="3" />
                                            </MultiBinding>
                                        </Grid.Visibility>
                                        <Ellipse Stroke="Black" Fill="#FA7300" Style="{StaticResource CoordPoint}" />
                                        <Polygon Points="0,0 -0.5,-0.25 0,0.5 0.5,-0.25"
                                             Stroke="Black" Fill="#4E6BDF"
                                             StrokeLineJoin="Round" StrokeThickness=".1">
                                            <Polygon.RenderTransform>
                                                <TransformGroup>
                                                    <RotateTransform Angle="{Binding LiveBearingPC2}" />
                                                    <TranslateTransform X=".5" Y="-.5" />
                                                    <ScaleTransform ScaleY="-1"/>
                                                </TransformGroup>
                                            </Polygon.RenderTransform>
                                        </Polygon>
                                    </Grid>
                                </Grid>

                                <Border x:Name="livePositionCoords"
                                        Visibility="{Binding ShowLivePosition, Converter={StaticResource BoolToVisibilityConverter}}"
                                        Canvas.Left="{Binding LivePositionEllipsePoint.X}"
                                        Canvas.Bottom="{Binding LivePositionEllipsePoint.Y}">
                                    <StackPanel Visibility="{Binding ShowLivePositionCoordinates, Converter={StaticResource BoolToVisibilityConverter}}">
                                        <TextBlock Text="(" />
                                        <TextBlock Text="{Binding LivePositionPoint.X, StringFormat=N3}" />
                                        <TextBlock Text=", " />
                                        <TextBlock Text="{Binding LivePositionPoint.Y, StringFormat=N3}" />
                                        <TextBlock Text=")" />
                                    </StackPanel>
                                </Border>

                                <Path x:Name="tempSegment" Stroke="Black" Visibility="{Binding TempSegmentVisible, Converter={StaticResource BoolToVisibilityConverter}}">
                                    <Path.Data>
                                        <LineGeometry StartPoint="{Binding TempSegmentStart}" EndPoint="{Binding TempSegmentEnd, Mode=TwoWay}" />
                                    </Path.Data>
                                </Path>

                                <Grid x:Name="BluePathGrid" Visibility="{Binding BluePathVisible, Converter={StaticResource BoolToVisibilityConverter}}">
                                    <Grid.Resources>
                                        <Style TargetType="Line" BasedOn="{StaticResource baseLine}">
                                            <Setter Property="Stroke" Value="Blue" />
                                        </Style>
                                    </Grid.Resources>
                                </Grid>
                                <Grid x:Name="RedPathGrid" Visibility="{Binding RedPathVisible, Converter={StaticResource BoolToVisibilityConverter}}">
                                    <Grid.Resources>
                                        <Style TargetType="Line" BasedOn="{StaticResource baseLine}">
                                            <Setter Property="Stroke" Value="Red" />
                                        </Style>
                                    </Grid.Resources>
                                </Grid>
                                <Grid x:Name="GreenPathGrid" Visibility="{Binding GreenPathVisible, Converter={StaticResource BoolToVisibilityConverter}}">
                                    <Grid.Resources>
                                        <Style TargetType="Line" BasedOn="{StaticResource baseLine}">
                                            <Setter Property="Stroke" Value="Green" />
                                        </Style>
                                    </Grid.Resources>
                                </Grid>
                            </Canvas>

                            <!--
                            This Canvas and Border are used as a very simple way to render a drag rectangle that
                            the user uses to specify an area to zoom in on.
                            -->
                            <Canvas
                                x:Name="dragZoomCanvas"
                                Visibility="Collapsed"
                                >
                                <Border 
                                    x:Name="dragZoomBorder"
                                    BorderBrush="Black"
                                    BorderThickness="1"
                                    Background="Silver"
                                    CornerRadius="1"
                                    Opacity="0"
                                    />
                            </Canvas>
                        </Grid>
                    </ZoomAndPan:ZoomAndPanControl>
                </ScrollViewer>

                <!--
                Mouse Hover Information Grid
                -->
                <uc:MouseHoverDisplayControl
                    x:Name="mouseHoverDisplay"
                    Grid.Column="3"
                    ShowRimDataUnderMouse="{Binding ElementName=thisWindow, Path=ShowRimDataUnderMouse, FallbackValue=False}"
                    RimDataUnderMouse="{Binding ElementName=thisWindow, Path=RimDataUnderMouse}" />
                
                <!--
                Right Panel Grid Splitter
                -->
                <GridSplitter x:Name="gsRightPanel" Grid.Column="4" Width="3" Background="#FF707070"
                              Margin="4,0,0,0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                              IsVisibleChanged="gsRightPanel_IsVisibleChanged">
                    <GridSplitter.Visibility>
                        <MultiBinding Converter="{StaticResource BoolToVisibilityMultiConverter}" ConverterParameter="Or"
                                      FallbackValue="Collapsed" TargetNullValue="Collapsed">
                            <Binding Path="ShowWalkmeshPanel" />
                        </MultiBinding>
                    </GridSplitter.Visibility>
                </GridSplitter>

                <!--
                Right Panel: Walkmesh Panel
                -->
                <Grid x:Name="optionsGrid" Grid.Column="5" Margin="5,0"
                      Visibility="{Binding ShowWalkmeshPanel,
                            Converter={StaticResource BoolToVisibilityConverter},
                            FallbackValue=Collapsed, TargetNullValue=Collapsed}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="3*" />
                        <RowDefinition Height="5" />
                        <RowDefinition Height="5*" />
                    </Grid.RowDefinitions>

                    <Grid.Resources>
                        <Style TargetType="ListViewItem" x:Key="OnItemStyle" BasedOn="{StaticResource BaseItemStyle}">
                            <EventSetter Event="MouseDoubleClick" Handler="LvOn_DoubleClick" />
                        </Style>
                        <Style TargetType="ListViewItem" x:Key="OffItemStyle" BasedOn="{StaticResource BaseItemStyle}">
                            <EventSetter Event="MouseDoubleClick" Handler="LvOff_DoubleClick" />
                        </Style>
                    </Grid.Resources>

                    <!-- List of active modules. -->
                    <Grid x:Name="OnGrid" Grid.Row="2" Margin="0,0,0,5">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <StackPanel Margin="10,0,0,5">
                            <TextBlock FontSize="14">
                                <Span>Active Walkmeshes (</Span>
                                <TextBlock Text="{Binding OnRims.Count, FallbackValue=0, TargetNullValue=0}" />
                                <Span>)</Span>
                            </TextBlock>
                        </StackPanel>
                        
                        <Button Content="Remove All" Width="80" Height="20"
                                HorizontalAlignment="Right" Margin="0,-2,0,0"
                                Command="{StaticResource Commands.RemoveAll}">
                            <Button.IsEnabled>
                                <MultiBinding Converter="{StaticResource BoolMultiConverter}" ConverterParameter="And">
                                    <Binding Path="OnRims.Count" Converter="{StaticResource IntGreaterEqualConverter}" ConverterParameter="1" />
                                    <Binding Path="IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                    <Binding Path="GameDataWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                    <Binding Path="AddPolyWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                    <Binding Path="UpdateLayerVisibilityWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                    <Binding Path="RemovePolyWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                </MultiBinding>
                            </Button.IsEnabled>
                        </Button>
                        
                        <ListView x:Name="lvOn" Grid.Row="1" ItemsSource="{Binding OnRims}"
                                  ItemContainerStyle="{StaticResource OnItemStyle}"
                                  ScrollViewer.VerticalScrollBarVisibility="Visible"
                                  ScrollViewer.CanContentScroll="False">
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn Width="18">
                                        <GridViewColumn.Header>
                                            <GridViewColumnHeader Tag="Color" Content="" />
                                        </GridViewColumn.Header>
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <Grid Margin="-4">
                                                    <Button Margin="0" Padding="0" BorderThickness="0"
                                                            Background="Transparent" BorderBrush="Transparent"
                                                            Click="RimColorButton_Click">
                                                        <Button.Template>
                                                            <ControlTemplate TargetType="Button">
                                                                <Border
                                                                    Background="{TemplateBinding Background}"
                                                                    BorderBrush="{TemplateBinding BorderBrush}"
                                                                    BorderThickness="{TemplateBinding BorderThickness}">
                                                                    <ContentPresenter
                                                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                                                </Border>
                                                            </ControlTemplate>
                                                        </Button.Template>
                                                        <Rectangle Margin="0" Height="14" Width="14"
                                                                   Fill="{Binding MeshColor}" StrokeThickness="1">
                                                            <Rectangle.Style>
                                                                <Style TargetType="Rectangle">
                                                                    <Style.Triggers>
                                                                        <Trigger Property="IsMouseOver" Value="True">
                                                                            <Setter Property="Stroke" Value="Red" />
                                                                        </Trigger>
                                                                        <Trigger Property="IsMouseOver" Value="False">
                                                                            <Setter Property="Stroke" Value="Black" />
                                                                        </Trigger>
                                                                    </Style.Triggers>
                                                                </Style>
                                                            </Rectangle.Style>
                                                        </Rectangle>
                                                    </Button>
                                                </Grid>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn Width="80" DisplayMemberBinding="{Binding FileName}">
                                        <GridViewColumn.Header>
                                            <GridViewColumnHeader Tag="Rim" Content="Rim" />
                                        </GridViewColumn.Header>
                                    </GridViewColumn>
                                    <GridViewColumn Width="70" DisplayMemberBinding="{Binding Planet}">
                                        <GridViewColumn.Header>
                                            <GridViewColumnHeader Tag="Planet" Content="Planet" />
                                        </GridViewColumn.Header>
                                    </GridViewColumn>
                                    <GridViewColumn Width="120" DisplayMemberBinding="{Binding CommonName}">
                                        <GridViewColumn.Header>
                                            <GridViewColumnHeader Tag="Common" Content="Common Name" />
                                        </GridViewColumn.Header>
                                    </GridViewColumn>
                                </GridView>
                            </ListView.View>
                        </ListView>

                        <!--<Button Grid.Row="2" Margin="0,5" Content="Remove All"
                                Command="{StaticResource Commands.RemoveAll}">
                            <Button.IsEnabled>
                                <MultiBinding Converter="{StaticResource BoolMultiConverter}" ConverterParameter="And">
                                    <Binding Path="OnRims.Count" Converter="{StaticResource IntGreaterEqualConverter}" ConverterParameter="1" />
                                    <Binding Path="IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                    <Binding Path="GameDataWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                    <Binding Path="AddPolyWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                    <Binding Path="UpdateLayerVisibilityWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                    <Binding Path="RemovePolyWorker.IsBusy" Converter="{StaticResource InverseBooleanConverter}" />
                                </MultiBinding>
                            </Button.IsEnabled>
                        </Button>-->
                    </Grid>

                    <!-- Resize the active and inactive lists. -->
                    <GridSplitter Grid.Row="3" Height="3" Background="Gray"
                                  HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>

                    <!-- List of inactive modules. -->
                    <Grid x:Name="OffGrid" Grid.Row="4">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>

                        <StackPanel Margin="10,5,0,5">
                            <TextBlock FontSize="14">
                                <Span>Inactive Walkmeshes (</Span>
                                <TextBlock Text="{Binding OffRims.Count, FallbackValue=0, TargetNullValue=0}" />
                                <Span>)</Span>
                            </TextBlock>
                        </StackPanel>
                        
                        <ListView x:Name="lvOff" Grid.Row="1" ItemsSource="{Binding OffRims}"
                                  ItemContainerStyle="{StaticResource OffItemStyle}"
                                  ScrollViewer.VerticalScrollBarVisibility="Visible"
                                  ScrollViewer.CanContentScroll="False">
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn Width="18">
                                        <GridViewColumn.Header>
                                            <GridViewColumnHeader Tag="Color" Content="" />
                                        </GridViewColumn.Header>
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <Grid Margin="-4">
                                                    <Rectangle Margin="0" Height="14" Width="14"
                                                        Fill="{Binding MeshColor}" Stroke="Black"
                                                        StrokeThickness="1" />
                                                </Grid>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn Width="80" DisplayMemberBinding="{Binding FileName}">
                                        <GridViewColumn.Header>
                                            <GridViewColumnHeader Tag="Rim" Content="Rim" />
                                        </GridViewColumn.Header>
                                    </GridViewColumn>
                                    <GridViewColumn Width="70" DisplayMemberBinding="{Binding Planet}">
                                        <GridViewColumn.Header>
                                            <GridViewColumnHeader Tag="Planet" Content="Planet" />
                                        </GridViewColumn.Header>
                                    </GridViewColumn>
                                    <GridViewColumn Width="120" DisplayMemberBinding="{Binding CommonName}">
                                        <GridViewColumn.Header>
                                            <GridViewColumnHeader Tag="Common" Content="Common Name" />
                                        </GridViewColumn.Header>
                                    </GridViewColumn>
                                </GridView>
                            </ListView.View>
                        </ListView>
                    </Grid>
                </Grid>

                <!--
                Right Panel Buttons Column
                -->
                <StackPanel Grid.Column="6" Orientation="Vertical" Margin="4,0,0,0">
                    <StackPanel.Resources>
                        <Style TargetType="ToggleButton">
                            <Setter Property="Background" Value="Transparent" />
                            <Setter Property="BorderBrush" Value="#FF707070" />
                            <Setter Property="BorderThickness" Value="0,4,0,0" />
                            <Setter Property="Margin" Value="0,0,0,4" />
                            <Setter Property="Width" Value="80" />
                            <Setter Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="90" />
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="ToggleButton">
                                        <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="BorderBrush" Value="MediumSlateBlue" />
                                    <Setter Property="Background" Value="Lavender" />
                                </Trigger>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter Property="BorderBrush" Value="Indigo" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </StackPanel.Resources>
                    <ToggleButton Content="Walkmeshes" IsChecked="{Binding ShowWalkmeshPanel}" />
                </StackPanel>
            </Grid>
        </Grid>
    </DockPanel>
</Window>
