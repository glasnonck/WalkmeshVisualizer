<Window
    x:Class="WalkmeshVisualizerWpf.Views.VisualizerWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:views="clr-namespace:WalkmeshVisualizerWpf.Views"
    xmlns:help="clr-namespace:WalkmeshVisualizerWpf.Helpers"
    xmlns:ZoomAndPan="clr-namespace:ZoomAndPan;assembly=ZoomAndPan"
    mc:Ignorable="d"
    Title="{Binding WindowTitle, Mode=OneTime}"
    MinHeight="600" MinWidth="800"
    Height="800" Width="1200"
    Loaded="MainWindow_Loaded"
    Icon="../Resources/Icon.png"
    d:DataContext="{d:DesignInstance views:VisualizerWindow, IsDesignTimeCreatable=False}"
    ResizeMode="CanResizeWithGrip"
    x:Name="thisWindow"
    >
    <Window.Resources>

        <!-- UI commands. -->
        <RoutedUICommand x:Key="Commands.ZoomOut">
            <RoutedUICommand.InputGestures>
                <KeyGesture>Minus</KeyGesture>
            </RoutedUICommand.InputGestures>
        </RoutedUICommand>
        <RoutedUICommand x:Key="Commands.ZoomIn">
            <RoutedUICommand.InputGestures>
                <KeyGesture>Plus</KeyGesture>
            </RoutedUICommand.InputGestures>
        </RoutedUICommand>
        <RoutedUICommand x:Key="Commands.JumpBackToPrevZoom">
            <RoutedUICommand.InputGestures>
                <KeyGesture>Backspace</KeyGesture>
            </RoutedUICommand.InputGestures>
        </RoutedUICommand>
        <RoutedUICommand x:Key="Commands.Fill">
            <RoutedUICommand.InputGestures>
                <KeyGesture>Ctrl+F</KeyGesture>
            </RoutedUICommand.InputGestures>
        </RoutedUICommand>
        <RoutedUICommand x:Key="Commands.OneHundredPercent">
            <RoutedUICommand.InputGestures>
                <KeyGesture>Ctrl+0</KeyGesture>
            </RoutedUICommand.InputGestures>
        </RoutedUICommand>
        <RoutedUICommand x:Key="Commands.FifteenHundredPercent" />
        
        <!---->
        <RoutedUICommand x:Key="Commands.FindMatchingCoords">
            <!--<RoutedUICommand.InputGestures>
                <KeyGesture>Space</KeyGesture>
            </RoutedUICommand.InputGestures>-->
        </RoutedUICommand>

        <RoutedUICommand x:Key="Commands.SwapGame" />
        <RoutedUICommand x:Key="Commands.RemoveAll" />

        <RoutedUICommand x:Key="Commands.LoadGame" />
        <RoutedUICommand x:Key="Commands.LoadCache" />
        <RoutedUICommand x:Key="Commands.ClearCache" />
        
        <!--
        Menu related commands and keybinds.
        -->
        <RoutedUICommand x:Key="Commands.Exit">
            <RoutedUICommand.InputGestures>
                <KeyGesture>Alt+F4</KeyGesture>
            </RoutedUICommand.InputGestures>
        </RoutedUICommand>

        <RoutedUICommand x:Key="Commands.SaveShownCanvas">
            <RoutedUICommand.InputGestures>
                <KeyGesture>Ctrl+S</KeyGesture>
            </RoutedUICommand.InputGestures>
        </RoutedUICommand>

        <RoutedUICommand x:Key="Commands.SaveEntireCanvas">
            <RoutedUICommand.InputGestures>
                <KeyGesture>Ctrl+Shift+S</KeyGesture>
            </RoutedUICommand.InputGestures>
        </RoutedUICommand>

        <RoutedUICommand x:Key="Commands.ViewHelp">
            <RoutedUICommand.InputGestures>
                <KeyGesture>Ctrl+F1</KeyGesture>
            </RoutedUICommand.InputGestures>
        </RoutedUICommand>
        
        <!--
        ToolBar related commands and keybinds.
        -->
        <RoutedUICommand x:Key="Commands.ShowWalkable">
            <RoutedUICommand.InputGestures>
                <KeyGesture>Ctrl+W</KeyGesture>
            </RoutedUICommand.InputGestures>
        </RoutedUICommand>

        <RoutedUICommand x:Key="Commands.ShowNonWalkable">
            <RoutedUICommand.InputGestures>
                <KeyGesture>Ctrl+Shift+W</KeyGesture>
            </RoutedUICommand.InputGestures>
        </RoutedUICommand>

        <RoutedUICommand x:Key="Commands.ShowTransAbort">
            <RoutedUICommand.InputGestures>
                <KeyGesture>Ctrl+G</KeyGesture>
            </RoutedUICommand.InputGestures>
        </RoutedUICommand>

        <RoutedUICommand x:Key="Commands.ShowTransAbortRegion">
            <RoutedUICommand.InputGestures>
                <KeyGesture>Ctrl+Shift+G</KeyGesture>
            </RoutedUICommand.InputGestures>
        </RoutedUICommand>

        <!--
        Converters.
        -->
        <help:ScaleToPercentConverter x:Key="scaleToPercentConverter" />
        <help:ScaleTextToPercentConverter x:Key="scaleTextToPercentConverter" />
        <help:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />
        <help:InverseBoolToVisibilityConverter x:Key="InverseBoolToVisibilityConverter" />
        <help:InverseBooleanConverter x:Key="InverseBooleanConverter" />
        <help:AndBoolToVisibilityMultiConverter x:Key="AndBoolToVisibilityMultiConverter" />
        <help:OrInverseBoolToVisibilityMultiConverter x:Key="OrInverseBoolToVisibilityMultiConverter" />
        <help:MatchRectFillMultiConverter x:Key="MatchRectFillMultiConverter" />
        <help:PointToTextConverter x:Key="PointToTextConverter" />

        <Style TargetType="ListViewItem" x:Key="BaseItemStyle">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="FontSize" Value="12" />
            <Setter Property="Foreground" Value="Black" />
        </Style>
    </Window.Resources>

    <Window.CommandBindings>

        <!--
        Bind commands to event handlers.
        -->
        <CommandBinding 
            Command="{StaticResource Commands.ZoomOut}" 
            Executed="ZoomOut_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.ZoomIn}" 
            Executed="ZoomIn_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.JumpBackToPrevZoom}" 
            Executed="JumpBackToPrevZoom_Executed" 
            CanExecute="JumpBackToPrevZoom_CanExecuted"
            />
        <CommandBinding 
            Command="{StaticResource Commands.Fill}" 
            Executed="Fill_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.OneHundredPercent}" 
            Executed="OneHundredPercent_Executed" 
            />
        <CommandBinding
            Command="{StaticResource Commands.RemoveAll}"
            Executed="RemoveAll_Executed"
            CanExecute="RemoveAll_CanExecute"
            />
        <CommandBinding
            Command="{StaticResource Commands.SwapGame}"
            Executed="SwapGame_Executed"
            CanExecute="SwapGame_CanExecute"
            />
        <CommandBinding
            Command="{StaticResource Commands.FindMatchingCoords}"
            Executed="FindMatchingCoords_Executed"
            CanExecute="FindMatchingCoords_CanExecute"
            />
        <CommandBinding
            Command="{StaticResource Commands.FifteenHundredPercent}"
            Executed="FifteenHundredPercent_Executed"
            />

        <CommandBinding
            Command="{StaticResource Commands.LoadGame}"
            Executed="LoadGame_Executed"
            CanExecute="LoadGame_CanExecute"
            />
        <CommandBinding
            Command="{StaticResource Commands.LoadCache}"
            Executed="LoadCache_Executed"
            CanExecute="LoadCache_CanExecute"
            />
        <CommandBinding
            Command="{StaticResource Commands.ClearCache}"
            Executed="ClearCache_Executed"
            CanExecute="ClearCache_CanExecute"
            />

        <!--
        Menu related command bindings.
        -->
        <CommandBinding
            Command="{StaticResource Commands.Exit}"
            Executed="ExitCommand_Executed"
            CanExecute="ExitCommand_CanExecute"
            />
        <CommandBinding
            Command="{StaticResource Commands.SaveShownCanvas}"
            Executed="SaveShownCanvas_Executed"
            CanExecute="SaveShownCanvas_CanExecute"
            />
        <CommandBinding
            Command="{StaticResource Commands.SaveEntireCanvas}"
            Executed="SaveEntireCanvas_Executed"
            CanExecute="SaveEntireCanvas_CanExecute"
            />
        <CommandBinding
            Command="{StaticResource Commands.ViewHelp}"
            Executed="ViewHelpCommand_Executed"
            CanExecute="ViewHelpCommand_CanExecute"
            />
        
        <!--
        ToolBar related command bindings.
        -->
        <CommandBinding
            Command="{StaticResource Commands.ShowWalkable}"
            Executed="ShowWalkableCommand_Executed"
            CanExecute="ShowWalkableCommand_CanExecute"
            />

        <CommandBinding
            Command="{StaticResource Commands.ShowNonWalkable}"
            Executed="ShowNonWalkableCommand_Executed"
            CanExecute="ShowNonWalkableCommand_CanExecute"
            />

        <CommandBinding
            Command="{StaticResource Commands.ShowTransAbort}"
            Executed="ShowTransAbortCommand_Executed"
            CanExecute="ShowTransAbortCommand_CanExecute"
            />

        <CommandBinding
            Command="{StaticResource Commands.ShowTransAbortRegion}"
            Executed="ShowTransAbortRegionCommand_Executed"
            CanExecute="ShowTransAbortRegionCommand_CanExecute"
            />

    </Window.CommandBindings>

    <DockPanel>
        <!--
        Menu to house various commands.
        -->
        <Menu x:Name="Menu" DockPanel.Dock="Top">
            <Menu.Resources>
                <Style TargetType="MenuItem">
                    <Setter Property="FontFamily" Value="Microsoft Sans Serif" />
                    <Setter Property="FontSize" Value="12" />
                    <Setter Property="Padding" Value="6,2" />
                </Style>
            </Menu.Resources>

            <MenuItem Header="_File">
                <MenuItem Header="Save _Shown Canvas As Image..." Command="{StaticResource Commands.SaveShownCanvas}" />
                <MenuItem Header="Save _Full Canvas As Image..." Command="{StaticResource Commands.SaveEntireCanvas}" />
                <Separator />
                <MenuItem Header="_Exit" Command="{StaticResource Commands.Exit}" />
            </MenuItem>

            <MenuItem Header="_View">
                <MenuItem Header="Zoom _In" Command="{StaticResource Commands.ZoomIn}" />
                <MenuItem Header="Zoom _Out" Command="{StaticResource Commands.ZoomOut}" />
                <Separator />
                <MenuItem Header="_Fill Page Zoom" Command="{StaticResource Commands.Fill}" />
                <MenuItem Header="_Default Zoom" Command="{StaticResource Commands.OneHundredPercent}" />
                <MenuItem Header="Return to _Previous Zoom" Command="{StaticResource Commands.JumpBackToPrevZoom}" />
                <Separator />
                <MenuItem
                    Header="Show _Walkable Faces"
                    Command="{StaticResource Commands.ShowWalkable}"
                    IsCheckable="True"
                    IsChecked="{Binding ShowWalkableFaces, Mode=TwoWay}"
                    >
                    <MenuItem.Icon>
                        <Image Source="../Resources/WalkIcon.png" />
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem
                    Header="Show _Non-Walkable Faces"
                    Command="{StaticResource Commands.ShowNonWalkable}"
                    IsCheckable="True"
                    IsChecked="{Binding ShowNonWalkableFaces, Mode=TwoWay}"
                    >
                    <MenuItem.Icon>
                        <Image Source="../Resources/NonWalkIcon.png" />
                    </MenuItem.Icon>
                </MenuItem>
                <Separator />
                <MenuItem
                    Header="Show _Gather Party Points"
                    Command="{StaticResource Commands.ShowTransAbort}"
                    IsCheckable="True"
                    IsChecked="{Binding ShowTransAbortPoints, Mode=TwoWay}"
                    >
                    <MenuItem.Icon>
                        <Image Source="../Resources/GatherPartyIcon.png" />
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem
                    Header="Show Gather Party _Regions"
                    Command="{StaticResource Commands.ShowTransAbortRegion}"
                    IsCheckable="True"
                    IsChecked="{Binding ShowTransAbortRegions, Mode=TwoWay}"
                    >
                    <MenuItem.Icon>
                        <Image Source="../Resources/GatherPartyRegionIcon.png" />
                    </MenuItem.Icon>
                </MenuItem>
            </MenuItem>

            <MenuItem Header="_Help">
                <MenuItem Header="_View Help" Command="{StaticResource Commands.ViewHelp}" />
            </MenuItem>
        </Menu>

        <!-- 
        Grid placed below the zoom and pan control that contains the zoom slider, zoom label and
        some button.
        -->
        <Grid Margin="5" DockPanel.Dock="Bottom">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>

            <ProgressBar
                x:Name="pbLoading"
                Width="200"
                Margin="5,0"
                Grid.Column="1"
                Value="{Binding CurrentProgress}"
                Visibility="{Binding IsBusy, Converter={StaticResource BoolToVisibilityConverter}}"
                />
            
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" Grid.Column="2">
                <StackPanel.Resources>
                    <Style TargetType="Button">
                        <Setter Property="Margin" Value="0" />
                        <Setter Property="Height" Value="20" />
                        <Setter Property="Width" Value="20" />
                        <Setter Property="Padding" Value="0,0,0,2" />
                    </Style>
                </StackPanel.Resources>

                <!-- The content zoom selector. -->
                <ComboBox
                    IsEditable="True"
                    Width="70"
                    Text="{Binding
                        ElementName=zoomAndPanControl,
                        Path=ContentScale,
                        Converter={StaticResource scaleTextToPercentConverter},
                        Mode=TwoWay}"
                    HorizontalContentAlignment="Right"
                    Margin="10,0"
                    Padding="0,2"
                    >
                    <ComboBox.Resources>
                        <DataTemplate x:Key="PercentageTemplate">
                            <StackPanel Orientation="Horizontal">
                                <TextBlock Text="{Binding}" />
                                <TextBlock Text=" %" />
                            </StackPanel>
                        </DataTemplate>
                        <Style TargetType="ComboBoxItem">
                            <Setter Property="HorizontalContentAlignment" Value="Right" />
                            <Setter Property="Padding" Value="0,0" />
                            <Setter Property="Margin" Value="0,0,5,0" />
                            <Setter Property="ContentTemplate" Value="{StaticResource PercentageTemplate}" />
                        </Style>
                    </ComboBox.Resources>
                    
                    <ComboBoxItem>10</ComboBoxItem>
                    <ComboBoxItem>100</ComboBoxItem>
                    <ComboBoxItem>300</ComboBoxItem>
                    <ComboBoxItem>1,000</ComboBoxItem>
                    <ComboBoxItem>1,500</ComboBoxItem>
                    <ComboBoxItem>2,000</ComboBoxItem>
                </ComboBox>

                <!-- Button to zoom out. -->
                <Button Content="-" Margin="0"
                        FontWeight="SemiBold" Foreground="Black"
                        Command="{StaticResource Commands.ZoomOut}" />

                <!-- Slider to change the current zoom level. -->
                <Slider Minimum="10" Maximum="1500"
                        SmallChange="10" LargeChange="20" 
                        TickFrequency="100" TickPlacement="TopLeft"
                        Width="150"
                        Value="{Binding ElementName=zoomAndPanControl, Path=ContentScale,
                                        Converter={StaticResource scaleToPercentConverter}}"
                        />

                <!-- Button to zoom in. -->
                <Button Content="+" Margin="0,0,15,0"
                        FontWeight="SemiBold" Foreground="Black"
                        Command="{StaticResource Commands.ZoomIn}" />
            </StackPanel>
        </Grid>

        <!--
        Match coordinates expander allows the user to check modules for valid faces and
        view the results of that search.
        -->
        <Expander
            DockPanel.Dock="Left"
            Grid.Column="0"
            ExpandDirection="Right"
            FontSize="14"
            Margin="0,5,0,0"
            >
            <Expander.Header>
                <TextBlock Text="Match Coordinates" Margin="0,5">
                    <TextBlock.LayoutTransform>
                        <RotateTransform Angle="-90" />
                    </TextBlock.LayoutTransform>
                </TextBlock>
            </Expander.Header>

            <Expander.Resources>
                <Style TargetType="ListViewItem" x:Key="MatchItemStyle" BasedOn="{StaticResource BaseItemStyle}">
                    <EventSetter Event="MouseDoubleClick" Handler="MatchItem_DoubleClick" />
                </Style>
            </Expander.Resources>

            <Border 
                BorderBrush="Black"
                BorderThickness="0,0,1,0"
                Padding="0,0,0,5"
                >
                <Grid Width="300">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" x:Name="rowLeftMatches" />
                        <RowDefinition Height="*" x:Name="rowRightMatches" />
                        <RowDefinition Height="*" x:Name="rowBothMatches" />
                    </Grid.RowDefinitions>

                    <Grid.Resources>
                        <Style TargetType="Grid">
                            <Setter Property="Margin" Value="5,5,5,0" />
                        </Style>
                        <Style TargetType="StackPanel">
                            <Setter Property="Margin" Value="5,0" />
                            <Setter Property="Orientation" Value="Horizontal" />
                        </Style>
                        <Style TargetType="Ellipse">
                            <Setter Property="Height" Value="8" />
                            <Setter Property="Width" Value="8" />
                            <Setter Property="Stroke" Value="Black" />
                            <Setter Property="Margin" Value="0,0,5,0" />
                        </Style>
                        <Style TargetType="ListView">
                            <Setter Property="Margin" Value="0,5,0,0" />
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
                            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Visible" />
                            <Setter Property="FontSize" Value="12" />
                        </Style>
                        <Style TargetType="ListViewItem">
                            <Setter Property="Background" Value="Transparent" />
                            <Setter Property="FontSize" Value="12" />
                            <Setter Property="Foreground" Value="Black" />
                        </Style>
                        <Style TargetType="Rectangle" x:Key="colorRectangle">
                            <Setter Property="Margin" Value="0" />
                            <Setter Property="Height" Value="14" />
                            <Setter Property="Width" Value="14" />
                            <Setter Property="Stroke" Value="Black" />
                            <Setter Property="StrokeThickness" Value="0.5" />
                        </Style>
                    </Grid.Resources>

                    <!-- Match coordinates button. -->
                    <Button
                        Grid.Row="0"
                        Content="Update Matches"
                        Margin="5,0"
                        Width="290"
                        Command="{StaticResource Commands.FindMatchingCoords}"
                        />

                    <!-- No point set text. -->
                    <TextBlock
                        Grid.Row="1"
                        Margin="5,5,5,0"
                        Text="Place a point by double clicking to begin matching walkmesh coordinates."
                        TextWrapping="Wrap"
                        Width="290"
                        >
                        <TextBlock.Visibility>
                            <MultiBinding Converter="{StaticResource OrInverseBoolToVisibilityMultiConverter}">
                                <Binding Path="LeftClickPointVisible" />
                                <Binding Path="RightClickPointVisible" />
                            </MultiBinding>
                        </TextBlock.Visibility>
                    </TextBlock>

                    <!-- Modules matching left click point. -->
                    <Grid x:Name="exLeftClickPoint" Grid.Row="1"
                          Visibility="{Binding LeftClickPointVisible, Converter={StaticResource BoolToVisibilityConverter}}"
                          >
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>

                        <StackPanel>
                            <Ellipse Fill="Black" />
                            <TextBlock Text="Black Point" FontWeight="SemiBold" />
                        </StackPanel>

                        <Button
                            HorizontalAlignment="Right"
                            Background="Transparent"
                            Padding="2,0"
                            Width="140"
                            Click="LeftCoordButton_Click"
                            Content="{Binding LastLeftClickModuleCoords, Converter={StaticResource PointToTextConverter}}"
                            />

                        <ListView
                            x:Name="lvLeftPointMatches"
                            Grid.Row="1"
                            ItemContainerStyle="{StaticResource MatchItemStyle}"
                            ItemsSource="{Binding LeftPointMatches}"
                            >
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn Width="18" Header="">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <Grid Margin="-4">
                                                    <Rectangle Style="{StaticResource colorRectangle}">
                                                        <Rectangle.Fill>
                                                            <MultiBinding Converter="{StaticResource MatchRectFillMultiConverter}">
                                                                <Binding />
                                                                <Binding ElementName="thisWindow" Path="OnRims" />
                                                                <Binding Path="Rim.MeshColor" />
                                                                <Binding ElementName="thisWindow" Path="OffRims" />
                                                            </MultiBinding>
                                                        </Rectangle.Fill>
                                                    </Rectangle>
                                                </Grid>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn Width="30" Header="">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <TextBlock Text="{Binding Walkability}" />
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn Width="60" DisplayMemberBinding="{Binding Rim.FileName}" Header="Rim" />
                                    <GridViewColumn Width="40" DisplayMemberBinding="{Binding Rim.Planet}" Header="Planet" />
                                    <GridViewColumn Width="110" DisplayMemberBinding="{Binding Rim.CommonName}" Header="Common Name" />
                                </GridView>
                            </ListView.View>
                        </ListView>
                    </Grid>

                    <!-- Modules matching right click point. -->
                    <Grid x:Name="exRightClickPoint" Grid.Row="2"
                          Visibility="{Binding RightClickPointVisible, Converter={StaticResource BoolToVisibilityConverter}}"
                          >
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>

                        <StackPanel>
                            <Ellipse Fill="White" />
                            <TextBlock Text="White Point" FontWeight="SemiBold" />
                        </StackPanel>

                        <Button
                            HorizontalAlignment="Right"
                            Background="Transparent"
                            Padding="2,0"
                            Width="140"
                            Click="RightCoordButton_Click"
                            Content="{Binding LastRightClickModuleCoords, Converter={StaticResource PointToTextConverter}}"
                            />

                        <ListView
                            x:Name="lvRightPointMatches"
                            Grid.Row="1"
                            ItemContainerStyle="{StaticResource MatchItemStyle}"
                            ItemsSource="{Binding RightPointMatches}"
                            >
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn Width="18" Header="">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <Grid Margin="-4">
                                                    <Rectangle Style="{StaticResource colorRectangle}">
                                                        <Rectangle.Fill>
                                                            <MultiBinding Converter="{StaticResource MatchRectFillMultiConverter}">
                                                                <Binding />
                                                                <Binding ElementName="thisWindow" Path="OnRims" />
                                                                <Binding Path="Rim.MeshColor" />
                                                                <Binding ElementName="thisWindow" Path="OffRims" />
                                                            </MultiBinding>
                                                        </Rectangle.Fill>
                                                    </Rectangle>
                                                </Grid>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn Width="30" Header="">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <TextBlock Text="{Binding Walkability}" />
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn Width="60" DisplayMemberBinding="{Binding Rim.FileName}" Header="Rim" />
                                    <GridViewColumn Width="40" DisplayMemberBinding="{Binding Rim.Planet}" Header="Planet" />
                                    <GridViewColumn Width="110" DisplayMemberBinding="{Binding Rim.CommonName}" Header="Common Name" />
                                </GridView>
                            </ListView.View>
                        </ListView>
                    </Grid>

                    <!-- Modules matching both left and right click points. -->
                    <Grid x:Name="exBothPoints" Grid.Row="3">
                        <Grid.Visibility>
                            <MultiBinding Converter="{StaticResource AndBoolToVisibilityMultiConverter}">
                                <Binding Path="LeftClickPointVisible" />
                                <Binding Path="RightClickPointVisible" />
                            </MultiBinding>
                        </Grid.Visibility>

                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>

                        <StackPanel>
                            <Ellipse Fill="Black" />
                            <Ellipse Fill="White" />
                            <TextBlock Text="Both Points" FontWeight="SemiBold" />
                        </StackPanel>

                        <ListView
                            x:Name="lvBothPointMatches"
                            Grid.Row="1"
                            ItemContainerStyle="{StaticResource MatchItemStyle}"
                            ItemsSource="{Binding BothPointMatches}"
                            >
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn Width="18" Header="">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <Grid Margin="-4">
                                                    <Rectangle Style="{StaticResource colorRectangle}">
                                                        <Rectangle.Fill>
                                                            <MultiBinding Converter="{StaticResource MatchRectFillMultiConverter}">
                                                                <Binding />
                                                                <Binding ElementName="thisWindow" Path="OnRims" />
                                                                <Binding Path="Rim.MeshColor" />
                                                                <Binding ElementName="thisWindow" Path="OffRims" />
                                                            </MultiBinding>
                                                        </Rectangle.Fill>
                                                    </Rectangle>
                                                </Grid>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn Width="30" Header="">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <TextBlock Text="{Binding Walkability}" />
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn Width="60" DisplayMemberBinding="{Binding Rim.FileName}" Header="Rim" />
                                    <GridViewColumn Width="40" DisplayMemberBinding="{Binding Rim.Planet}" Header="Planet" />
                                    <GridViewColumn Width="110" DisplayMemberBinding="{Binding Rim.CommonName}" Header="Common Name" />
                                </GridView>
                            </ListView.View>
                        </ListView>
                    </Grid>
                </Grid>
            </Border>
        </Expander>

        <!--
        Grid containing the canvas and the options panel.
        -->
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />      <!-- Canvas -->
                <ColumnDefinition Width="Auto" />   <!-- GridSplitter -->
                <ColumnDefinition Width="Auto" />   <!-- Options Panel -->
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>

            <!--
            Grid splitter allows the options panel to be resized.
            -->
            <GridSplitter
                Grid.Column="1"
                Grid.RowSpan="2"
                Width="3"
                Background="Gray"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                Margin="5,0,0,0"
                />

            <!--
            Grid placed to the right of the canvas containing the visualizer options. Modules can be added
            or removed from the canvas display.
            -->
            <Grid x:Name="optionsGrid" Grid.Column="2" Grid.RowSpan="2" Margin="5,0,0,0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>

                <Grid.Resources>
                    <Style TargetType="ListViewItem" x:Key="OnItemStyle" BasedOn="{StaticResource BaseItemStyle}">
                        <EventSetter Event="MouseDoubleClick" Handler="LvOn_DoubleClick" />
                    </Style>
                    <Style TargetType="ListViewItem" x:Key="OffItemStyle" BasedOn="{StaticResource BaseItemStyle}">
                        <EventSetter Event="MouseDoubleClick" Handler="LvOff_DoubleClick" />
                    </Style>
                </Grid.Resources>

                <views:SelectGameView
                    IsBusy="{Binding IsBusy, Mode=OneWay}"
                    />

                <!--
                Stack panel containing the select game options and, once selected, displaying the
                currently selected game.
                -->
                <StackPanel Orientation="Vertical" Visibility="Collapsed">
                    <!--
                    Stack panel to select which game to visualize.
                    -->
                    <StackPanel Name="pnlGameSelect" Orientation="Vertical">
                        <StackPanel.Resources>
                            <Style TargetType="Button">
                                <Setter Property="Width" Value="70" />
                                <Setter Property="Margin" Value="3" />
                                <Setter Property="Visibility" Value="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled, Converter={StaticResource BoolToVisibilityConverter}}" />
                            </Style>
                            <Style TargetType="Grid">
                                <Setter Property="Margin" Value="20,0,2,0" />
                            </Style>
                            <Style TargetType="StackPanel">
                                <Setter Property="Orientation" Value="Horizontal" />
                            </Style>
                            <Style TargetType="TextBlock">
                                <Setter Property="VerticalAlignment" Value="Center" />
                                <Setter Property="TextDecorations" Value="Underline" />
                            </Style>
                        </StackPanel.Resources>
                        
                        <!--Select Game-->
                        <TextBlock
                            Text="Select Game:"
                            Margin="5,5,5,0"
                            FontWeight="Bold"
                            TextDecorations="None"
                            />
                        
                        <!--KotOR 1-->
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <TextBlock Text="KotOR 1" />
                            <StackPanel Grid.Column="2">
                                <Button Content="Load Game" Command="{StaticResource Commands.LoadGame}" CommandParameter="{x:Static help:SupportedGame.Kotor1}" />
                                <Button Content="Load Cache" Command="{StaticResource Commands.LoadCache}" CommandParameter="{x:Static help:SupportedGame.Kotor1}" />
                                <Button Content="Clear Cache" Command="{StaticResource Commands.ClearCache}" CommandParameter="{x:Static help:SupportedGame.Kotor1}" Visibility="Visible" />
                            </StackPanel>
                        </Grid>

                        <!--KotOR 2-->
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <TextBlock Text="KotOR 2" />
                            <StackPanel Grid.Column="2">
                                <Button Content="Load Game" Command="{StaticResource Commands.LoadGame}" CommandParameter="{x:Static help:SupportedGame.Kotor2}" />
                                <Button Content="Load Cache" Command="{StaticResource Commands.LoadCache}" CommandParameter="{x:Static help:SupportedGame.Kotor2}" />
                                <Button Content="Clear Cache" Command="{StaticResource Commands.ClearCache}" CommandParameter="{x:Static help:SupportedGame.Kotor2}" Visibility="Visible" />
                            </StackPanel>
                        </Grid>
                    </StackPanel>

                    <!--
                    Grid to display currently selected game.
                    -->
                    <Grid Margin="5,5,5,0" x:Name="pnlSelectedGame">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.Resources>
                            <Style TargetType="TextBlock">
                                <Setter Property="FontWeight" Value="Bold" />
                                <Setter Property="VerticalAlignment" Value="Center" />
                            </Style>
                        </Grid.Resources>

                        <TextBlock Text="Selected Game: " />
                        <TextBlock Text="{Binding SelectedLabel}" Grid.Column="2" Margin="0,0,10,0" />

                        <Button Content="Swap Game" Grid.Column="3" Width="70"
                                Command="{StaticResource Commands.SwapGame}" />
                    </Grid>
                </StackPanel>

                <!--
                Grid to select which RIM files to visualize.
                -->
                <Grid Name="pnlRimSelect" Grid.Row="2">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="4*" />
                        <RowDefinition Height="5" />
                        <RowDefinition Height="5*" />
                    </Grid.RowDefinitions>

                    <!-- List of active modules. -->
                    <Grid x:Name="OnGrid" Grid.Row="0">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <TextBlock
                            Text="Active Walkmeshes"
                            Margin="0,5"
                            HorizontalAlignment="Center"
                            TextDecorations="Underline"
                            />
                        <ListView
                            x:Name="lvOn"
                            Grid.Row="1"
                            ItemContainerStyle="{StaticResource OnItemStyle}"
                            ItemsSource="{Binding OnRims}"
                            ScrollViewer.VerticalScrollBarVisibility="Visible"
                            ScrollViewer.CanContentScroll="False"
                            >
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn Width="18">
                                        <GridViewColumn.Header>
                                            <GridViewColumnHeader Tag="Color" Content="" />
                                        </GridViewColumn.Header>
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <Grid Margin="-4">
                                                    <Rectangle
                                                        Margin="0"
                                                        Height="14" Width="14"
                                                        Fill="{Binding MeshColor}"
                                                        Stroke="Black"
                                                        StrokeThickness=".5"
                                                        />
                                                </Grid>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn Width="60" DisplayMemberBinding="{Binding FileName}">
                                        <GridViewColumn.Header>
                                            <GridViewColumnHeader Tag="Rim" Content="Rim" />
                                        </GridViewColumn.Header>
                                    </GridViewColumn>
                                    <GridViewColumn Width="60" DisplayMemberBinding="{Binding Planet}">
                                        <GridViewColumn.Header>
                                            <GridViewColumnHeader Tag="Planet" Content="Planet" />
                                        </GridViewColumn.Header>
                                    </GridViewColumn>
                                    <GridViewColumn Width="124" DisplayMemberBinding="{Binding CommonName}">
                                        <GridViewColumn.Header>
                                            <GridViewColumnHeader Tag="Common" Content="Common Name" />
                                        </GridViewColumn.Header>
                                    </GridViewColumn>
                                </GridView>
                            </ListView.View>
                        </ListView>

                        <Button Grid.Row="2" Margin="0,5" Content="Remove All"
                            Command="{StaticResource Commands.RemoveAll}" />
                    </Grid>

                    <!-- Resize the active and inactive lists. -->
                    <GridSplitter Grid.Row="1" Height="3" Background="Gray"
                                  HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>

                    <!-- List of inactive modules. -->
                    <Grid x:Name="OffGrid" Grid.Row="2">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>

                        <TextBlock
                            Text="Inactive Walkmeshes"
                            Margin="0,5"
                            HorizontalAlignment="Center"
                            TextDecorations="Underline"
                            />
                        <ListView
                            x:Name="lvOff"
                            Grid.Row="1"
                            ItemContainerStyle="{StaticResource OffItemStyle}"
                            ItemsSource="{Binding OffRims}"
                            ScrollViewer.VerticalScrollBarVisibility="Visible"
                            ScrollViewer.CanContentScroll="False"
                            >
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn Width="18">
                                        <GridViewColumn.Header>
                                            <GridViewColumnHeader Tag="Color" Content="" />
                                        </GridViewColumn.Header>
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <Grid Margin="-4">
                                                    <Rectangle
                                                        Margin="0"
                                                        Height="14" Width="14"
                                                        Fill="{Binding MeshColor}"
                                                        Stroke="Black"
                                                        StrokeThickness=".5"
                                                        />
                                                </Grid>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn Width="60" DisplayMemberBinding="{Binding FileName}">
                                        <GridViewColumn.Header>
                                            <GridViewColumnHeader Tag="Rim" Content="Rim" />
                                        </GridViewColumn.Header>
                                    </GridViewColumn>
                                    <GridViewColumn Width="60" DisplayMemberBinding="{Binding Planet}">
                                        <GridViewColumn.Header>
                                            <GridViewColumnHeader Tag="Planet" Content="Planet" />
                                        </GridViewColumn.Header>
                                    </GridViewColumn>
                                    <GridViewColumn Width="124" DisplayMemberBinding="{Binding CommonName}">
                                        <GridViewColumn.Header>
                                            <GridViewColumnHeader Tag="Common" Content="Common Name" />
                                        </GridViewColumn.Header>
                                    </GridViewColumn>
                                </GridView>
                            </ListView.View>
                        </ListView>

                    </Grid>
                </Grid>
            </Grid>

            <!--
            ToolBar with shortcut buttons for canvas display options.
            -->
            <ToolBarTray  Background="White">
                <ToolBarTray.Resources>
                    <Style TargetType="Image">
                        <Setter Property="Height" Value="20" />
                        <Setter Property="Width" Value="20" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False">
                                <Setter Property="Opacity" Value="0.5" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                    <Style TargetType="ToggleButton">
                        <Setter Property="Margin" Value="5,0" />
                    </Style>
                </ToolBarTray.Resources>
                <ToolBar Background="GhostWhite">
                    <ToggleButton
                        Margin="2,0"
                        ToolTip="Show walkable faces."
                        IsChecked="{Binding ShowWalkableFaces, Mode=TwoWay}"
                        Command="{StaticResource Commands.ShowWalkable}"
                        >
                        <Image Source="../Resources/WalkIcon.png" />
                    </ToggleButton>
                    <ToggleButton
                        Margin="2,0"
                        ToolTip="Show non-walkable faces."
                        IsChecked="{Binding ShowNonWalkableFaces, Mode=TwoWay}"
                        Command="{StaticResource Commands.ShowNonWalkable}"
                        >
                        <Image Source="../Resources/NonWalkIcon.png" />
                    </ToggleButton>
                    <Separator />
                    <ToggleButton
                        Margin="2,0"
                        ToolTip="Show gather party points."
                        IsChecked="{Binding ShowTransAbortPoints, Mode=TwoWay}"
                        Command="{StaticResource Commands.ShowTransAbort}"
                        >
                        <Image Source="../Resources/GatherPartyIcon.png" />
                    </ToggleButton>
                    <ToggleButton
                        Margin="2,0"
                        ToolTip="Show gather party regions."
                        IsChecked="{Binding ShowTransAbortRegions, Mode=TwoWay}"
                        Command="{StaticResource Commands.ShowTransAbortRegion}"
                        >
                        <Image Source="../Resources/GatherPartyRegionIcon.png" />
                    </ToggleButton>
                </ToolBar>
            </ToolBarTray>

            <!--
            Wrap the ZoomAndPanControl in a ScrollViewer.
            When the scaled content that is displayed in ZoomAndPanControl is larger than the viewport
            onto the content.
            ScrollViewer's scrollbars can be used to manipulate the offset of the viewport.    
            -->
            <ScrollViewer
                x:Name="scroller"
                Grid.Column="0"
                Grid.Row="1"
                CanContentScroll="True"
                VerticalScrollBarVisibility="Visible"
                HorizontalScrollBarVisibility="Visible"
                >

                <!-- This is the control that handles zooming and panning. -->
                <ZoomAndPan:ZoomAndPanControl
                    x:Name="zoomAndPanControl"
                    Background="LightGray"
                    MouseDown="zoomAndPanControl_MouseDown"
                    MouseUp="zoomAndPanControl_MouseUp"
                    MouseMove="zoomAndPanControl_MouseMove"
                    MouseWheel="zoomAndPanControl_MouseWheel"
                    MouseDoubleClick="zoomAndPanControl_MouseDoubleClick"
                    ContentScale="3"
                    MinContentScale=".1"
                    MaxContentScale="20"
                    >

                    <!-- This is the content that is displayed. -->
                    <Grid x:Name="theGrid" Width="250" Height="200">
                        <!-- This Canvas is the main part of the content that is displayed. -->
                        <Canvas x:Name="content" Background="White">
                            <Canvas.Resources>
                                <TransformGroup x:Key="CartesianTransform">
                                    <TranslateTransform Y="{Binding BottomOffset}" X="{Binding LeftOffset}"/>
                                    <ScaleTransform ScaleY="-1" />
                                    <TranslateTransform Y="{Binding Path=Height, RelativeSource={RelativeSource AncestorType={x:Type Grid}}}" />
                                </TransformGroup>

                                <TransformGroup x:Key="OffsetTransform">
                                    <TranslateTransform X="{Binding LeftOffset}" Y="{Binding BottomOffset}" />
                                    <TranslateTransform Y="{Binding Path=Height, RelativeSource={RelativeSource AncestorType={x:Type Grid}}}" />
                                </TransformGroup>

                                <TranslateTransform x:Key="CoordOffsetTransform" X="2" Y="1.5" />

                                <Style TargetType="Ellipse" x:Key="CoordPoint">
                                    <Setter Property="Width" Value="1" />
                                    <Setter Property="Height" Value="1" />
                                    <Setter Property="StrokeThickness" Value=".1" />
                                </Style>

                                <Style TargetType="Polygon">
                                    <Setter Property="RenderTransform" Value="{StaticResource CartesianTransform}" />
                                </Style>

                                <Style TargetType="StackPanel">
                                    <Setter Property="Margin" Value="0" />
                                    <Setter Property="Orientation" Value="Horizontal" />
                                    <Setter Property="RenderTransform" Value="{StaticResource CoordOffsetTransform}" />
                                </Style>

                                <Style TargetType="TextBlock">
                                    <Setter Property="FontSize" Value="4" />
                                </Style>
                            </Canvas.Resources>

                            <!--
                            This Ellipse and StackPanel act as the point and text field for users to check map coordinates.
                            To maintain these data bindings, they will be saved in case the canvas is cleared.
                            If a module is added or removed, both will be hidden using the PointClicked boolean.
                            -->
                            <Ellipse
                                x:Name="leftClickEllipse" Fill="Black" Stroke="White"
                                Visibility="{Binding LeftClickPointVisible, Converter={StaticResource BoolToVisibilityConverter}}"
                                Canvas.Left="{Binding LeftClickPoint.X}"
                                Canvas.Bottom="{Binding LeftClickPoint.Y}"
                                Style="{StaticResource CoordPoint}"
                                />
                            <StackPanel
                                x:Name="leftClickCoords"
                                Visibility="{Binding LeftClickPointVisible, Converter={StaticResource BoolToVisibilityConverter}}"
                                Canvas.Left="{Binding LeftClickPoint.X}"
                                Canvas.Bottom="{Binding LeftClickPoint.Y}"
                                >
                                <TextBlock Text="(" />
                                <TextBlock Text="{Binding LeftClickModuleCoords.X, StringFormat=N2}" />
                                <TextBlock Text=", " />
                                <TextBlock Text="{Binding LeftClickModuleCoords.Y, StringFormat=N2}" />
                                <TextBlock Text=")" />
                            </StackPanel>

                            <Ellipse
                                x:Name="rightClickEllipse" Fill="White" Stroke="Black"
                                Visibility="{Binding RightClickPointVisible, Converter={StaticResource BoolToVisibilityConverter}}"
                                Canvas.Left="{Binding RightClickPoint.X}"
                                Canvas.Bottom="{Binding RightClickPoint.Y}"
                                Style="{StaticResource CoordPoint}"
                                />
                            <StackPanel
                                x:Name="rightClickCoords"
                                Visibility="{Binding RightClickPointVisible, Converter={StaticResource BoolToVisibilityConverter}}"
                                Canvas.Left="{Binding RightClickPoint.X}"
                                Canvas.Bottom="{Binding RightClickPoint.Y}"
                                >
                                <TextBlock Text="(" />
                                <TextBlock Text="{Binding RightClickModuleCoords.X, StringFormat=N2}" />
                                <TextBlock Text=", " />
                                <TextBlock Text="{Binding RightClickModuleCoords.Y, StringFormat=N2}" />
                                <TextBlock Text=")" />
                            </StackPanel>
                        </Canvas>

                        <!--
                        This Canvas and Border are used as a very simple way to render a drag rectangle that
                        the user uses to specify an area to zoom in on.
                        -->
                        <Canvas
                            x:Name="dragZoomCanvas"
                            Visibility="Collapsed"
                            >
                            <Border 
                                x:Name="dragZoomBorder"
                                BorderBrush="Black"
                                BorderThickness="1"
                                Background="Silver"
                                CornerRadius="1"
                                Opacity="0"
                                />
                        </Canvas>
                    </Grid>
                </ZoomAndPan:ZoomAndPanControl>
            </ScrollViewer>

        </Grid>
    </DockPanel>
</Window>
